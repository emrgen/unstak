syntax = "proto3";

package unpost.apis.v1;

import "google/api/annotations.proto";
import "google/protobuf/descriptor.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";

option go_package = "github.com/emrgen/unpost/proto/v1";

message User {
  string id = 1 [(validate.rules).string.uuid = true];
  string email = 2;
  string name = 3;
  string avatar = 4;
  google.protobuf.Timestamp created_at = 10;
  google.protobuf.Timestamp updated_at = 11;
}

enum PostStatus {
  DRAFT = 0;
  PUBLISHED = 1;
  ARCHIVED = 2;
}

message Post {
  string id = 1 [(validate.rules).string.uuid = true];
  string title = 2;
  string content = 3;
  string excerpt = 4;
  string summary = 5;
  string thumbnail = 6;
  PostStatus status = 7;
  repeated Tag tags = 8;
  map<string, uint32> reaction = 9;
  google.protobuf.Timestamp created_at = 10;
  google.protobuf.Timestamp updated_at = 11;
  string created_by_id = 12 [(validate.rules).string.uuid = true];
  optional User created_by_user = 13;
  int64 version = 14;
}

message CreatePostRequest {
  string title = 2;
  string content = 3;
}

message CreatePostResponse {
  Post post = 1;
}

message GetPostRequest {
  string id = 1;
}

message GetPostResponse {
  Post post = 1;
}

message ListPostRequest {
  int32 page = 2;
  int32 per_page = 3;
  optional PostStatus status = 4;
}

message ListPostResponse {
  repeated Post posts = 1;
}

message UpdatePostRequest {
  string id = 1 [(validate.rules).string.uuid = true];
  optional string title = 2;
  optional string content = 3;
  optional string thumbnail = 4;
  optional string summary = 5;
  optional string excerpt = 6;
  optional string status = 7;
  int64 version = 8;
}

message UpdatePostResponse {
  Post post = 1;
}

message DeletePostRequest {
  string id = 1 [(validate.rules).string.uuid = true];
}

message DeletePostResponse {
  string id = 1 [(validate.rules).string.uuid = true];
}

message AddPostTagRequest {
  string post_id = 1 [(validate.rules).string.uuid = true];
  string tag_id = 2 [(validate.rules).string.uuid = true];
}

message AddPostTagResponse {
  Post post = 1;
}

message RemovePostTagRequest {
  string post_id = 1;
  string tag_id = 2;
}

message RemovePostTagResponse {
  Post post = 1;
}

message UpdatePostReactionRequest {
  string post_id = 1;
  string reaction_name = 2;
  bool count = 3;
}

message UpdatePostReactionResponse {
  Post post = 1;
}

message UpdatePostStatusRequest {
  string post_id = 1;
  PostStatus status = 2;
}

message UpdatePostStatusResponse {
  Post post = 1;
}

service PostService {
  rpc CreatePost(CreatePostRequest) returns (CreatePostResponse) {
    option (google.api.http) = {
      post: "/v1/posts"
      body: "*"
    };
  }

  rpc GetPost(GetPostRequest) returns (GetPostResponse) {
    option (google.api.http) = {get: "/v1/posts/{id}"};
  }

  rpc ListPost(ListPostRequest) returns (ListPostResponse) {
    option (google.api.http) = {get: "/v1/posts"};
  }

  rpc UpdatePost(UpdatePostRequest) returns (UpdatePostResponse) {
    option (google.api.http) = {
      put: "/v1/posts/{id}"
      body: "*"
    };
  }

  rpc DeletePost(DeletePostRequest) returns (DeletePostResponse) {
    option (google.api.http) = {delete: "/v1/posts/{id}"};
  }

  rpc AddPostTag(AddPostTagRequest) returns (AddPostTagResponse) {
    option (google.api.http) = {post: "/v1/posts/{post_id}/tags/{tag_id}"};
  }

  rpc RemovePostTag(RemovePostTagRequest) returns (RemovePostTagResponse) {
    option (google.api.http) = {delete: "/v1/posts/{post_id}/tags/{tag_id}"};
  }

  rpc UpdatePostReaction(UpdatePostReactionRequest) returns (UpdatePostReactionResponse) {
    option (google.api.http) = {
      put: "/v1/posts/{post_id}/reaction"
      body: "*"
    };
  }

  rpc UpdatePostStatus(UpdatePostStatusRequest) returns (UpdatePostStatusResponse) {
    option (google.api.http) = {
      put: "/v1/posts/{post_id}/status"
      body: "*"
    };
  }
}

message Collection {
  string id = 1 [(validate.rules).string.uuid = true];
  string name = 2;
  repeated Post posts = 3;
  repeated Tag tags = 7;

  google.protobuf.Timestamp created_at = 10;
  google.protobuf.Timestamp updated_at = 11;
  string created_by_id = 12 [(validate.rules).string.uuid = true];
}

message CreateCollectionRequest {
  string name = 2;
  string description = 3;
  string thumbnail = 4;
  google.protobuf.Timestamp created_at = 10;
  google.protobuf.Timestamp updated_at = 11;
}

message CreateCollectionResponse {
  Collection collection = 1;
}

message GetCollectionRequest {
  string id = 1 [(validate.rules).string.uuid = true];
}

message GetCollectionResponse {
  Collection collection = 1;
}

message ListCollectionRequest {
  int32 page = 2;
  int32 per_page = 3;
  optional string created_by_id = 4 [(validate.rules).string.uuid = true];
}

message ListCollectionResponse {
  repeated Collection collections = 1;
}

message UpdateCollectionRequest {
  string id = 1 [(validate.rules).string.uuid = true];
  string name = 2;
}

message UpdateCollectionResponse {
  Collection collection = 1;
}

message DeleteCollectionRequest {
  string id = 1;
}

message DeleteCollectionResponse {
  string id = 1;
}

message AddCollectionTagRequest {
  string collection_id = 1;
  string tag_id = 2;
}

message AddCollectionTagResponse {
  Collection collection = 1;
}

message RemoveCollectionTagRequest {
  string collection_id = 1;
  string tag_id = 2;
}

message RemoveCollectionTagResponse {
  Collection collection = 1;
}

service CollectionService {
  rpc CreateCollection(CreateCollectionRequest) returns (CreateCollectionResponse) {
    option (google.api.http) = {
      post: "/v1/collections"
      body: "*"
    };
  }

  rpc GetCollection(GetCollectionRequest) returns (GetCollectionResponse) {
    option (google.api.http) = {get: "/v1/collections/{id}"};
  }

  rpc ListCollection(ListCollectionRequest) returns (ListCollectionResponse) {
    option (google.api.http) = {get: "/v1/collections"};
  }

  rpc UpdateCollection(UpdateCollectionRequest) returns (UpdateCollectionResponse) {
    option (google.api.http) = {
      put: "/v1/collections/{id}"
      body: "*"
    };
  }

  rpc DeleteCollection(DeleteCollectionRequest) returns (DeleteCollectionResponse) {
    option (google.api.http) = {delete: "/v1/collections/{id}"};
  }


  rpc AddCollectionTag(AddCollectionTagRequest) returns (AddCollectionTagResponse) {
    option (google.api.http) = {post: "/v1/collections/{collection_id}/tags/{tag_id}"};
  }

  rpc RemoveCollectionTag(RemoveCollectionTagRequest) returns (RemoveCollectionTagResponse) {
    option (google.api.http) = {delete: "/v1/collections/{collection_id}/tags/{tag_id}"};
  }
}

message UpdateFileURLRequest {
  string id = 1 [(validate.rules).string.uuid = true];
}

message UpdateFileURLResponse {
  string url = 1;
}

message DownloadFileURLRequest {
  string id = 1 [(validate.rules).string.uuid = true];
}

message DownloadFileURLResponse {
  string url = 1;
}

service FileService {
  rpc UpdateFileURL(UpdateFileURLRequest) returns (UpdateFileURLResponse) {
    option (google.api.http) = {
      post: "/v1/files/{id}/url"
      body: "*"
    };
  }

  rpc DownloadFileURL(DownloadFileURLRequest) returns (DownloadFileURLResponse) {
    option (google.api.http) = {get: "/v1/files/{id}/url"};
  }
}

// Tags are application wide unique identifiers for categorizing content.
message Tag {
  string id = 1;
  string name = 2;
  google.protobuf.Timestamp created_at = 3;
  google.protobuf.Timestamp updated_at = 4;
}

message CreateTagRequest {
  string name = 1;
}

message CreateTagResponse {
  Tag tag = 1;
}

message GetTagRequest {
  string id = 1;
}

message GetTagResponse {
  Tag tag = 1;
}

message ListTagRequest {
  int32 page = 1;
  int32 per_page = 2;
}

message ListTagResponse {
  repeated Tag tags = 1;
}

message UpdateTagRequest {
  string id = 1;
  string name = 2;
}

message UpdateTagResponse {
  Tag tag = 1;
}

message DeleteTagRequest {
  string id = 1;
}

message DeleteTagResponse {
  string id = 1;
}

service TagService {
  rpc CreateTag(CreateTagRequest) returns (CreateTagResponse) {
    option (google.api.http) = {
      post: "/v1/tags"
      body: "*"
    };
  }

  rpc GetTag(GetTagRequest) returns (GetTagResponse) {
    option (google.api.http) = {get: "/v1/tags/{id}"};
  }

  rpc ListTag(ListTagRequest) returns (ListTagResponse) {
    option (google.api.http) = {get: "/v1/tags"};
  }

  rpc UpdateTag(UpdateTagRequest) returns (UpdateTagResponse) {
    option (google.api.http) = {
      put: "/v1/tags/{id}"
      body: "*"
    };
  }

  rpc DeleteTag(DeleteTagRequest) returns (DeleteTagResponse) {
    option (google.api.http) = {delete: "/v1/tags/{id}"};
  }
}

message Course {
  string id = 1 [(validate.rules).string.uuid = true];
  string cover_page_id = 2 [(validate.rules).string.uuid = true];
  Page cover_page = 4;
  google.protobuf.Timestamp created_at = 10;
  google.protobuf.Timestamp updated_at = 11;
  string created_by_id = 12 [(validate.rules).string.uuid = true];
  int64 version = 13;
  repeated Tag tags = 14;
}

message CreateCourseRequest {
  string title = 1;
  string content = 2;
  string description = 3;
  string thumbnail = 4;
}

message CreateCourseResponse {
  Course course = 1;
}

message GetCourseRequest {
  string id = 1 [(validate.rules).string.uuid = true];
}

message GetCourseResponse {
  Course course = 1;
}

message ListCourseRequest {
  int32 page = 1;
  int32 per_page = 2;
}

message ListCourseResponse {
  repeated Course courses = 1;
}

message UpdateCourseRequest {
  string id = 1 [(validate.rules).string.uuid = true];
}

message UpdateCourseResponse {
  Course course = 1;
}

message DeleteCourseRequest {
  string id = 1 [(validate.rules).string.uuid = true];
}

message DeleteCourseResponse {
  string id = 1 [(validate.rules).string.uuid = true];
}

message AddCourseTagRequest {
  string course_id = 1 [(validate.rules).string.uuid = true];
  string tag_id = 2 [(validate.rules).string.uuid = true];
}

message AddCourseTagResponse {
  Course course = 1;
}

message RemoveCourseTagRequest {
  string course_id = 1 [(validate.rules).string.uuid = true];
  string tag_id = 2 [(validate.rules).string.uuid = true];
}

message RemoveCourseTagResponse {
  Course course = 1;
}

service CourseService {
  rpc CreateCourse(CreateCourseRequest) returns (CreateCourseResponse) {
    option (google.api.http) = {
      post: "/v1/courses"
      body: "*"
    };
  }

  rpc GetCourse(GetCourseRequest) returns (GetCourseResponse) {
    option (google.api.http) = {get: "/v1/courses/{id}"};
  }

  rpc ListCourse(ListCourseRequest) returns (ListCourseResponse) {
    option (google.api.http) = {get: "/v1/courses"};
  }

  rpc UpdateCourse(UpdateCourseRequest) returns (UpdateCourseResponse) {
    option (google.api.http) = {
      put: "/v1/courses/{id}"
      body: "*"
    };
  }

  rpc DeleteCourse(DeleteCourseRequest) returns (DeleteCourseResponse) {
    option (google.api.http) = {delete: "/v1/courses/{id}"};
  }

  rpc AddCourseTag(AddCourseTagRequest) returns (AddCourseTagResponse) {
    option (google.api.http) = {post: "/v1/courses/{course_id}/tags/{tag_id}"};
  }

  rpc RemoveCourseTag(RemoveCourseTagRequest) returns (RemoveCourseTagResponse) {
    option (google.api.http) = {delete: "/v1/courses/{course_id}/tags/{tag_id}"};
  }
}

message Page {
  string course_id = 1 [(validate.rules).string.uuid = true];
  string id = 2 [(validate.rules).string.uuid = true];
  string title = 3;
  string content = 4;
  string summary = 5;
  string excerpt = 6;
  string thumbnail = 7;
  string content_pages = 8;
  repeated Tag tags = 9;
  google.protobuf.Timestamp created_at = 10;
  google.protobuf.Timestamp updated_at = 11;
  int64 version = 12;
  PostStatus status = 13;
  string created_by_id = 14 [(validate.rules).string.uuid = true];
}

message CreatePageRequest {
  string course_id = 1 [(validate.rules).string.uuid = true];
  string title = 2;
  string content = 3;
  string thumbnail = 4;
}

message CreatePageResponse {
  Page page = 1;
}

message GetPageRequest {
  string id = 1 [(validate.rules).string.uuid = true];
}

message GetPageResponse {
  Page page = 1;
}

message UpdatePageRequest {
  string id = 1 [(validate.rules).string.uuid = true];
  optional string title = 2;
  optional string content = 3;
  optional string parts = 4;
  optional string summary = 5;
  optional string excerpt = 6;
  optional string thumbnail = 9;
  int64 version = 10;
}

message UpdatePageResponse {
  Page page = 1;
}

message DeletePageRequest {
  string id = 1 [(validate.rules).string.uuid = true];
}

message DeletePageResponse {
  string id = 1 [(validate.rules).string.uuid = true];
}

message AddPageTagRequest {
  string page_id = 1 [(validate.rules).string.uuid = true];
  string tag_id = 2 [(validate.rules).string.uuid = true];
}

message AddPageTagResponse {
  Page page = 1;
}

message RemovePageTagRequest {
  string page_id = 1 [(validate.rules).string.uuid = true];
  string tag_id = 2 [(validate.rules).string.uuid = true];
}

message RemovePageTagResponse {
  Page page = 1;
}

service PageService {
  rpc CreatePage(CreatePageRequest) returns (CreatePageResponse) {
    option (google.api.http) = {
      post: "/v1/pages"
      body: "*"
    };
  }

  rpc GetPage(GetPageRequest) returns (GetPageResponse) {
    option (google.api.http) = {get: "/v1/pages/{id}"};
  }

  rpc UpdatePage(UpdatePageRequest) returns (UpdatePageResponse) {
    option (google.api.http) = {
      put: "/v1/pages/{id}"
      body: "*"
    };
  }

  rpc DeletePage(DeletePageRequest) returns (DeletePageResponse) {
    option (google.api.http) = {delete: "/v1/pages/{id}"};
  }

  rpc AddPageTag(AddPageTagRequest) returns (AddPageTagResponse) {
    option (google.api.http) = {post: "/v1/pages/{page_id}/tags/{tag_id}"};
  }

  rpc RemovePageTag(RemovePageTagRequest) returns (RemovePageTagResponse) {
    option (google.api.http) = {delete: "/v1/pages/{page_id}/tags/{tag_id}"};
  }
}

// -------------------------
// Subscription
// -------------------------

message Subscription {
  string id = 1 [(validate.rules).string.uuid = true];
  string name = 2;
  string description = 3;
  string thumbnail = 4;
  string created_by_id = 5 [(validate.rules).string.uuid = true];
  repeated SubscriptionMember members = 6;
  google.protobuf.Timestamp created_at = 10;
  google.protobuf.Timestamp updated_at = 11;
}

message CreateSubscriptionRequest {
  string name = 2;
  string description = 3;
}

message CreateSubscriptionResponse {
  Subscription subscription = 1;
}

message GetSubscriptionRequest {
  string id = 1 [(validate.rules).string.uuid = true];
}

message GetSubscriptionResponse {
  Subscription subscription = 1;
}

message ListSubscriptionsRequest {
  int32 page = 2;
  int32 per_page = 3;
}

message ListSubscriptionsResponse {
  repeated Subscription subscriptions = 1;
}

message UpdateSubscriptionRequest {
  string id = 1 [(validate.rules).string.uuid = true];
  string name = 2;
  string description = 3;
}

message UpdateSubscriptionResponse {
  Subscription subscription = 1;
}

message DeleteSubscriptionRequest {
  string id = 1 [(validate.rules).string.uuid = true];
}

message DeleteSubscriptionResponse {
  string id = 1 [(validate.rules).string.uuid = true];
}

service SubscriptionService {
  rpc CreateSubscription(CreateSubscriptionRequest) returns (CreateSubscriptionResponse) {
    option (google.api.http) = {
      post: "/v1/subscriptions"
      body: "*"
    };
  }

  rpc GetSubscription(GetSubscriptionRequest) returns (GetSubscriptionResponse) {
    option (google.api.http) = {get: "/v1/subscriptions/{id}"};
  }

  rpc ListSubscriptions(ListSubscriptionsRequest) returns (ListSubscriptionsResponse) {
    option (google.api.http) = {get: "/v1/subscriptions"};
  }

  rpc UpdateSubscription(UpdateSubscriptionRequest) returns (UpdateSubscriptionResponse) {
    option (google.api.http) = {
      put: "/v1/subscriptions/{id}"
      body: "*"
    };
  }

  rpc DeleteSubscription(DeleteSubscriptionRequest) returns (DeleteSubscriptionResponse) {
    option (google.api.http) = {delete: "/v1/subscriptions/{id}"};
  }

}

enum Permission {
  UNSPECIFIED = 0;
  READER = 1;
  WRITER = 2;
  OWNER = 4;
  ADMIN = 8;
}

message SubscriptionMember {
  string id = 1 [(validate.rules).string.uuid = true];
  string subscription_id = 2;
  string user_id = 3;
  Subscription subscription = 4;
  User user = 5;
  google.protobuf.Timestamp created_at = 10;
  google.protobuf.Timestamp updated_at = 11;
}

message CreateSubscriptionMemberRequest {
  string subscription_id = 1 [(validate.rules).string.uuid = true];
  string user_id = 2 [(validate.rules).string.uuid = true];
  string role = 3;
}

message CreateSubscriptionMemberResponse {
  SubscriptionMember subscription_permission = 1;
}

message GetSubscriptionMemberRequest {
  string id = 1 [(validate.rules).string.uuid = true];
}

message GetSubscriptionMemberResponse {
  SubscriptionMember member = 1;
}

// ListSubscriptionMemberRequest is a request message for listing subscription permissions.
message ListSubscriptionMemberRequest {
  string subscription_id = 1 [(validate.rules).string.uuid = true];
  int32 page = 2;
  int32 per_page = 3;
}

message ListSubscriptionMemberResponse {
  repeated SubscriptionMember members = 1;
}

message UpdateSubscriptionMemberRequest {
  string id = 1;
  string role = 2;
}

message UpdateSubscriptionMemberResponse {
  SubscriptionMember subscription_permission = 1;
}

message DeleteSubscriptionMemberRequest {
  string id = 1;
}

message DeleteSubscriptionMemberResponse {
  string id = 1;
}

service SubscriptionMemberService {
  rpc CreateSubscriptionMember(CreateSubscriptionMemberRequest) returns (CreateSubscriptionMemberResponse) {
    option (google.api.http) = {
      post: "/v1/subscription_permissions"
      body: "*"
    };
  }

  rpc GetSubscriptionMember(GetSubscriptionMemberRequest) returns (GetSubscriptionMemberResponse) {
    option (google.api.http) = {get: "/v1/subscription_permissions/{id}"};
  }

  rpc ListSubscriptionMember(ListSubscriptionMemberRequest) returns (ListSubscriptionMemberResponse) {
    option (google.api.http) = {get: "/v1/subscription_permissions"};
  }

  rpc UpdateSubscriptionMember(UpdateSubscriptionMemberRequest) returns (UpdateSubscriptionMemberResponse) {
    option (google.api.http) = {
      put: "/v1/subscription_permissions/{id}"
      body: "*"
    };
  }

  rpc DeleteSubscriptionMember(DeleteSubscriptionMemberRequest) returns (DeleteSubscriptionMemberResponse) {
    option (google.api.http) = {delete: "/v1/subscription_permissions/{id}"};
  }
}

