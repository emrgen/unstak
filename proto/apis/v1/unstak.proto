syntax = "proto3";

package unstak.apis.v1;

import "google/api/annotations.proto";
import "google/protobuf/descriptor.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";

option go_package = "github.com/emrgen/unpost/proto/v1";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  security_definitions: {
    security: {
      key: "OAuth2PasswordBearer",
      value: {
        type: TYPE_OAUTH2
        flow: FLOW_PASSWORD
        token_url: "/v1/auth/token",
      }
    }
  }
};

enum UserRole {
  Contributor = 0; // Contributor can create but can't publish
  Author = 1; // Author can create and manage post, tags
  Editor = 2; // Editor can invite authors and contributors
  Admin = 3; // Admin can manage all data
  Owner = 4;
}

message Account {
  string id = 1 [(validate.rules).string.uuid = true];
  string email = 2;
  string name = 3;
  string avatar = 4;
  UserRole role = 5;
  google.protobuf.Timestamp created_at = 10;
  google.protobuf.Timestamp updated_at = 11;
}

message CreateOwnerRequest {
  string email = 1;
  string username = 2;
  string password = 3;
}

message CreateOwnerResponse {
  Account user = 1;
}

message CheckOwnerSetupRequest {}

message CheckOwnerSetupResponse {
  bool is_setup = 1;
}

message LoginRequest {
  string email = 2 [(validate.rules).string.email = true];
  string password = 3 [
    (validate.rules).string.min_len = 3,
    (validate.rules).string.max_len = 64
  ];
  optional string client_id = 4 [(validate.rules).string.uuid = true];
}

message AuthToken {
  string access_token = 1;
  string refresh_token = 2;
  string token_type = 3;
  int32 expires_in = 4;
  int32 expires_at = 5;
}

message LoginResponse {
  AuthToken token = 1;
  Account account = 2;
}

message CreateAccountRequest {
  string email = 2 [(validate.rules).string.email = true];
  string name = 3;
  string password = 4 [
    (validate.rules).string.min_len = 3,
    (validate.rules).string.max_len = 64
  ];
}

message CreateAccountResponse {
  Account account = 1;
}

message ListAccountsRequest {

}

message ListAccountsResponse {

}

service AccountService {
  rpc CreateAccount(CreateAccountRequest) returns (CreateAccountResponse) {
    option (google.api.http) = {
      post: "/v1/accounts"
      body: "*"
    };
  }

  rpc LoginUsingPassword(LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/v1/accounts/login"
      body: "*"
    };
  }

  rpc ListAccounts(ListAccountsRequest) returns (ListAccountsResponse) {
    option (google.api.http) = {
      get: "/v1/accounts"
    };
  }
}

enum PostStatus {
  DRAFT = 0;
  PUBLISHED = 1;
  UNPUBLISHED = 2;
  ARCHIVED = 3;
}

message Post {
  string id = 1 [(validate.rules).string.uuid = true];
  string title = 2;
  string content = 3;
  string excerpt = 4;
  string summary = 5;
  string thumbnail = 6;
  string slug = 7;
  string featured_image = 8;
  map<string, uint32> reaction = 9;
  PostStatus status = 10;
  repeated Tag tags = 11;
  repeated Account authors = 14;
  google.protobuf.Timestamp created_at = 20;
  google.protobuf.Timestamp updated_at = 21;
  int64 version = 22;
  string slug_id = 23;
}

message CreatePostRequest {
  optional string post_id = 1 [(validate.rules).string.uuid = true];
  string slug = 2;
  string title = 3;
  string content = 4;
  string summary = 5;
  string excerpt = 6;
}

message CreatePostResponse {
  Post post = 1;
}

message GetPostRequest {
  string id = 1;
}

message GetPostBySlagRequest {
  string slag = 1;
}

message GetPostBySlagResponse {
  Post post = 1;
}

message GetPostResponse {
  Post post = 1;
}

message ListPostRequest {
  repeated Account authors = 3;
  optional PostStatus status = 4;
  repeated Tag tags = 5;
  int32 page = 10;
  int32 per_page = 11;
}

message ListPostResponse {
  repeated Post posts = 1;
}

message UpdatePostRequest {
  string post_id = 1 [(validate.rules).string.uuid = true];
  optional string title = 2;
  optional string content = 3;
  optional string thumbnail = 4;
  optional string summary = 5;
  optional string excerpt = 6;
  optional string status = 7;
  optional string authors = 8;
  optional string slug = 9;
  int64 version = 10;
}

message UpdatePostResponse {
  Post post = 1;
}

message DeletePostRequest {
  string id = 1 [(validate.rules).string.uuid = true];
}

message DeletePostResponse {
  string id = 1 [(validate.rules).string.uuid = true];
}

message AddPostTagRequest {
  string post_id = 1 [(validate.rules).string.uuid = true];
  string tag_id = 2 [(validate.rules).string.uuid = true];
}

message AddPostTagResponse {
  Post post = 1;
}

message RemovePostTagRequest {
  string post_id = 1;
  string tag_id = 2;
}

message RemovePostTagResponse {
  Post post = 1;
}

message UpdatePostReactionRequest {
  string post_id = 1;
  string reaction_name = 2;
  bool count = 3;
}

message UpdatePostReactionResponse {
  Post post = 1;
}

message UpdatePostStatusRequest {
  string post_id = 1;
  PostStatus status = 2;
}

message UpdatePostStatusResponse {
  Post post = 1;
}

service PostService {
  // CreatePost
  rpc CreatePost(CreatePostRequest) returns (CreatePostResponse) {
    option (google.api.http) = {
      post: "/v1/posts"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {key: "OAuth2PasswordBearer"}
      }
    };
  }

  // GetPost
  rpc GetPost(GetPostRequest) returns (GetPostResponse) {
    option (google.api.http) = {get: "/v1/posts/{id}"};

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {key: "OAuth2PasswordBearer"}
      }
    };
  }

  // GetPostBySlag
  rpc GetPostBySlag(GetPostBySlagRequest) returns (GetPostBySlagResponse) {
    option (google.api.http) = {get: "/v1/posts/slag/{slag}"};

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {key: "OAuth2PasswordBearer"}
      }
    };
  }

  // ListPost
  rpc ListPost(ListPostRequest) returns (ListPostResponse) {
    option (google.api.http) = {get: "/v1/posts"};

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {key: "OAuth2PasswordBearer"}
      }
    };
  }

  // UpdatePost
  rpc UpdatePost(UpdatePostRequest) returns (UpdatePostResponse) {
    option (google.api.http) = {
      put: "/v1/posts/{post_id}"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {key: "OAuth2PasswordBearer"}
      }
    };
  }

  // DeletePost
  rpc DeletePost(DeletePostRequest) returns (DeletePostResponse) {
    option (google.api.http) = {delete: "/v1/posts/{id}"};

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {key: "OAuth2PasswordBearer"}
      }
    };
  }

  // AddPostTag
  rpc AddPostTag(AddPostTagRequest) returns (AddPostTagResponse) {
    option (google.api.http) = {post: "/v1/posts/{post_id}/tags/{tag_id}"};

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {key: "OAuth2PasswordBearer"}
      }
    };
  }

  // RemovePostTag
  rpc RemovePostTag(RemovePostTagRequest) returns (RemovePostTagResponse) {
    option (google.api.http) = {delete: "/v1/posts/{post_id}/tags/{tag_id}"};

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {key: "OAuth2PasswordBearer"}
      }
    };
  }

  // UpdatePostReaction
  rpc UpdatePostReaction(UpdatePostReactionRequest) returns (UpdatePostReactionResponse) {
    option (google.api.http) = {
      put: "/v1/posts/{post_id}/reaction"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {key: "OAuth2PasswordBearer"}
      }
    };
  }

  // UpdatePostStatus
  rpc UpdatePostStatus(UpdatePostStatusRequest) returns (UpdatePostStatusResponse) {
    option (google.api.http) = {
      put: "/v1/posts/{post_id}/status"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {key: "OAuth2PasswordBearer"}
      }
    };
  }
}

message UpdateFileURLRequest {
  string id = 1 [(validate.rules).string.uuid = true];
}

message UpdateFileURLResponse {
  string url = 1;
}

message DownloadFileURLRequest {
  string id = 1 [(validate.rules).string.uuid = true];
}

message DownloadFileURLResponse {
  string url = 1;
}

service FileService {
  rpc UpdateFileURL(UpdateFileURLRequest) returns (UpdateFileURLResponse) {
    option (google.api.http) = {
      post: "/v1/files/{id}/url"
      body: "*"
    };
  }

  rpc DownloadFileURL(DownloadFileURLRequest) returns (DownloadFileURLResponse) {
    option (google.api.http) = {get: "/v1/files/{id}/url"};
  }
}

// Tags are application wide unique identifiers for categorizing content.
message Tag {
  string space_id = 1 [(validate.rules).string.uuid = true];
  string id = 2;
  string name = 3;
  google.protobuf.Timestamp created_at = 4;
  google.protobuf.Timestamp updated_at = 5;
}

message CreateTagRequest {
  string space_id = 1 [(validate.rules).string.uuid = true];
  string name = 2;
}

message CreateTagResponse {
  Tag tag = 1;
}

message GetTagRequest {
  string id = 1;
}

message GetTagResponse {
  Tag tag = 1;
}

message ListTagRequest {
  string space_id = 1 [(validate.rules).string.uuid = true];
  int32 page = 2;
  int32 per_page = 3;
}

message ListTagResponse {
  repeated Tag tags = 1;
}

message UpdateTagRequest {
  string id = 1;
  string name = 2;
}

message UpdateTagResponse {
  Tag tag = 1;
}

message DeleteTagRequest {
  string id = 1;
}

message DeleteTagResponse {
  string id = 1;
}

service TagService {
  rpc CreateTag(CreateTagRequest) returns (CreateTagResponse) {
    option (google.api.http) = {
      post: "/v1/tags"
      body: "*"
    };
  }

  rpc GetTag(GetTagRequest) returns (GetTagResponse) {
    option (google.api.http) = {get: "/v1/tags/{id}"};
  }

  rpc ListTag(ListTagRequest) returns (ListTagResponse) {
    option (google.api.http) = {get: "/v1/tags"};
  }

  rpc UpdateTag(UpdateTagRequest) returns (UpdateTagResponse) {
    option (google.api.http) = {
      put: "/v1/tags/{id}"
      body: "*"
    };
  }

  rpc DeleteTag(DeleteTagRequest) returns (DeleteTagResponse) {
    option (google.api.http) = {delete: "/v1/tags/{id}"};
  }
}

message Course {
  string id = 1 [(validate.rules).string.uuid = true];
  string cover_page_id = 2 [(validate.rules).string.uuid = true];
  Page cover_page = 4;
  google.protobuf.Timestamp created_at = 10;
  google.protobuf.Timestamp updated_at = 11;
  string created_by_id = 12 [(validate.rules).string.uuid = true];
  int64 version = 13;
  repeated Tag tags = 14;
  string space_id = 15 [(validate.rules).string.uuid = true];
}

message CreateCourseRequest {
  string title = 1;
  string content = 2;
  string description = 3;
  string thumbnail = 4;
}

message CreateCourseResponse {
  Course course = 1;
}

message GetCourseRequest {
  string id = 1 [(validate.rules).string.uuid = true];
}

message GetCourseResponse {
  Course course = 1;
}

message ListCourseRequest {
  int32 page = 1;
  int32 per_page = 2;
}

message ListCourseResponse {
  repeated Course courses = 1;
}

message UpdateCourseRequest {
  string id = 1 [(validate.rules).string.uuid = true];
}

message UpdateCourseResponse {
  Course course = 1;
}

message DeleteCourseRequest {
  string id = 1 [(validate.rules).string.uuid = true];
}

message DeleteCourseResponse {
  string id = 1 [(validate.rules).string.uuid = true];
}

message AddCourseTagRequest {
  string course_id = 1 [(validate.rules).string.uuid = true];
  string tag_id = 2 [(validate.rules).string.uuid = true];
}

message AddCourseTagResponse {
  Course course = 1;
}

message RemoveCourseTagRequest {
  string course_id = 1 [(validate.rules).string.uuid = true];
  string tag_id = 2 [(validate.rules).string.uuid = true];
}

message RemoveCourseTagResponse {
  Course course = 1;
}

service CourseService {
  rpc CreateCourse(CreateCourseRequest) returns (CreateCourseResponse) {
    option (google.api.http) = {
      post: "/v1/courses"
      body: "*"
    };
  }

  rpc GetCourse(GetCourseRequest) returns (GetCourseResponse) {
    option (google.api.http) = {get: "/v1/courses/{id}"};
  }

  rpc ListCourse(ListCourseRequest) returns (ListCourseResponse) {
    option (google.api.http) = {get: "/v1/courses"};
  }

  rpc UpdateCourse(UpdateCourseRequest) returns (UpdateCourseResponse) {
    option (google.api.http) = {
      put: "/v1/courses/{id}"
      body: "*"
    };
  }

  rpc DeleteCourse(DeleteCourseRequest) returns (DeleteCourseResponse) {
    option (google.api.http) = {delete: "/v1/courses/{id}"};
  }

  rpc AddCourseTag(AddCourseTagRequest) returns (AddCourseTagResponse) {
    option (google.api.http) = {post: "/v1/courses/{course_id}/tags/{tag_id}"};
  }

  rpc RemoveCourseTag(RemoveCourseTagRequest) returns (RemoveCourseTagResponse) {
    option (google.api.http) = {delete: "/v1/courses/{course_id}/tags/{tag_id}"};
  }
}

message Page {
  string course_id = 1 [(validate.rules).string.uuid = true];
  string id = 2 [(validate.rules).string.uuid = true];
  string title = 3;
  string content = 4;
  string summary = 5;
  string excerpt = 6;
  string thumbnail = 7;
  string content_pages = 8;
  repeated Tag tags = 9;
  google.protobuf.Timestamp created_at = 10;
  google.protobuf.Timestamp updated_at = 11;
  int64 version = 12;
  PostStatus status = 13;
  string created_by_id = 14 [(validate.rules).string.uuid = true];
}

message CreatePageRequest {
  string course_id = 1 [(validate.rules).string.uuid = true];
  string title = 2;
  string content = 3;
  string thumbnail = 4;
}

message CreatePageResponse {
  Page page = 1;
}

message GetPageRequest {
  string id = 1 [(validate.rules).string.uuid = true];
}

message GetPageResponse {
  Page page = 1;
}

message UpdatePageRequest {
  string id = 1 [(validate.rules).string.uuid = true];
  optional string title = 2;
  optional string content = 3;
  optional string parts = 4;
  optional string summary = 5;
  optional string excerpt = 6;
  optional string thumbnail = 9;
  int64 version = 10;
}

message UpdatePageResponse {
  Page page = 1;
}

message DeletePageRequest {
  string id = 1 [(validate.rules).string.uuid = true];
}

message DeletePageResponse {
  string id = 1 [(validate.rules).string.uuid = true];
}

message AddPageTagRequest {
  string page_id = 1 [(validate.rules).string.uuid = true];
  string tag_id = 2 [(validate.rules).string.uuid = true];
}

message AddPageTagResponse {
  Page page = 1;
}

message RemovePageTagRequest {
  string page_id = 1 [(validate.rules).string.uuid = true];
  string tag_id = 2 [(validate.rules).string.uuid = true];
}

message RemovePageTagResponse {
  Page page = 1;
}

service PageService {
  rpc CreatePage(CreatePageRequest) returns (CreatePageResponse) {
    option (google.api.http) = {
      post: "/v1/pages"
      body: "*"
    };
  }

  rpc GetPage(GetPageRequest) returns (GetPageResponse) {
    option (google.api.http) = {get: "/v1/pages/{id}"};
  }

  rpc UpdatePage(UpdatePageRequest) returns (UpdatePageResponse) {
    option (google.api.http) = {
      put: "/v1/pages/{id}"
      body: "*"
    };
  }

  rpc DeletePage(DeletePageRequest) returns (DeletePageResponse) {
    option (google.api.http) = {delete: "/v1/pages/{id}"};
  }

  rpc AddPageTag(AddPageTagRequest) returns (AddPageTagResponse) {
    option (google.api.http) = {post: "/v1/pages/{page_id}/tags/{tag_id}"};
  }

  rpc RemovePageTag(RemovePageTagRequest) returns (RemovePageTagResponse) {
    option (google.api.http) = {delete: "/v1/pages/{page_id}/tags/{tag_id}"};
  }
}

// -------------------------
// Tier
// -------------------------

message Tier {
  string id = 1 [(validate.rules).string.uuid = true];
  string name = 2;
  string description = 3;
  string thumbnail = 4;
  string created_by_id = 5 [(validate.rules).string.uuid = true];
  repeated TierMember members = 6;
  google.protobuf.Timestamp created_at = 10;
  google.protobuf.Timestamp updated_at = 11;
  string space_id = 15 [(validate.rules).string.uuid = true];
}

message CreateTierRequest {
  string name = 2;
  string description = 3;
}

message CreateTierResponse {
  Tier tier = 1;
}

message GetTierRequest {
  string id = 1 [(validate.rules).string.uuid = true];
}

message GetTierResponse {
  Tier tier = 1;
}

message ListTiersRequest {
  int32 page = 2;
  int32 per_page = 3;
}

message ListTiersResponse {
  repeated Tier tiers = 1;
}

message UpdateTierRequest {
  string id = 1 [(validate.rules).string.uuid = true];
  string name = 2;
  string description = 3;
}

message UpdateTierResponse {
  Tier tier = 1;
}

message DeleteTierRequest {
  string id = 1 [(validate.rules).string.uuid = true];
}

message DeleteTierResponse {
  string id = 1 [(validate.rules).string.uuid = true];
}

service TierService {
  rpc CreateTier(CreateTierRequest) returns (CreateTierResponse) {
    option (google.api.http) = {
      post: "/v1/tiers"
      body: "*"
    };
  }

  rpc GetTier(GetTierRequest) returns (GetTierResponse) {
    option (google.api.http) = {get: "/v1/tiers/{id}"};
  }

  rpc ListTiers(ListTiersRequest) returns (ListTiersResponse) {
    option (google.api.http) = {get: "/v1/tiers"};
  }

  rpc UpdateTier(UpdateTierRequest) returns (UpdateTierResponse) {
    option (google.api.http) = {
      put: "/v1/tiers/{id}"
      body: "*"
    };
  }

  rpc DeleteTier(DeleteTierRequest) returns (DeleteTierResponse) {
    option (google.api.http) = {delete: "/v1/tiers/{id}"};
  }
}

message TierMember {
  string id = 1 [(validate.rules).string.uuid = true];
  string tier_id = 2;
  string user_id = 3;
  Tier tier = 4;
  Account user = 5;
  google.protobuf.Timestamp created_at = 10;
  google.protobuf.Timestamp updated_at = 11;
}

message CreateTierMemberRequest {
  string tier_id = 1 [(validate.rules).string.uuid = true];
  string user_id = 2 [(validate.rules).string.uuid = true];
  string role = 3;
}

message CreateTierMemberResponse {
  TierMember tier_permission = 1;
}

message GetTierMemberRequest {
  string id = 1 [(validate.rules).string.uuid = true];
}

message GetTierMemberResponse {
  TierMember member = 1;
}

// ListTierMemberRequest is a request message for listing tier permissions.
message ListTierMemberRequest {
  optional string tier_id = 1 [(validate.rules).string.uuid = true];
  optional string space_id = 2 [(validate.rules).string.uuid = true];
  int32 page = 3;
  int32 per_page = 4;
}

message ListTierMemberResponse {
  repeated TierMember members = 1;
}

message UpdateTierMemberRequest {
  string id = 1;
  string role = 2;
}

message UpdateTierMemberResponse {
  TierMember tier_permission = 1;
}

message DeleteTierMemberRequest {
  string id = 1;
}

message DeleteTierMemberResponse {
  string id = 1;
}

service TierMemberService {
  rpc CreateTierMember(CreateTierMemberRequest) returns (CreateTierMemberResponse) {
    option (google.api.http) = {
      post: "/v1/tier_permissions"
      body: "*"
    };
  }

  rpc GetTierMember(GetTierMemberRequest) returns (GetTierMemberResponse) {
    option (google.api.http) = {get: "/v1/tier_permissions/{id}"};
  }

  rpc ListTierMember(ListTierMemberRequest) returns (ListTierMemberResponse) {
    option (google.api.http) = {get: "/v1/tier_permissions"};
  }

  rpc UpdateTierMember(UpdateTierMemberRequest) returns (UpdateTierMemberResponse) {
    option (google.api.http) = {
      put: "/v1/tier_permissions/{id}"
      body: "*"
    };
  }

  rpc DeleteTierMember(DeleteTierMemberRequest) returns (DeleteTierMemberResponse) {
    option (google.api.http) = {delete: "/v1/tier_permissions/{id}"};
  }
}

message SendNewsletterSubscriptionRequest {
  string email = 1;
}

message SendNewsletterSubscriptionResponse {
  string message = 1;
}

service NewsLetterService {
  rpc SendNewsLetter(SendNewsletterSubscriptionRequest) returns (SendNewsletterSubscriptionResponse) {
    option (google.api.http) = {
      post: "/v1/newsletters"
      body: "*"
    };
  }
}
