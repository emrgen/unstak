/* tslint:disable */
/* eslint-disable */
/**
 * apis/v1/unpost.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CollectionServiceUpdateCollectionRequest
 */
export interface CollectionServiceUpdateCollectionRequest {
    /**
     * 
     * @type {Array<V1Post>}
     * @memberof CollectionServiceUpdateCollectionRequest
     */
    'posts'?: Array<V1Post>;
}
/**
 * 
 * @export
 * @interface PostServiceUpdatePostRequest
 */
export interface PostServiceUpdatePostRequest {
    /**
     * 
     * @type {String}
     * @memberof PostServiceUpdatePostRequest
     */
    'title'?: String;
    /**
     * 
     * @type {String}
     * @memberof PostServiceUpdatePostRequest
     */
    'content'?: String;
}
/**
 * 
 * @export
 * @interface ProtobufAny
 */
export interface ProtobufAny {
    [key: string]: object | any;

    /**
     * 
     * @type {String}
     * @memberof ProtobufAny
     */
    '@type'?: String;
}
/**
 * 
 * @export
 * @interface RpcStatus
 */
export interface RpcStatus {
    /**
     * 
     * @type {number}
     * @memberof RpcStatus
     */
    'code'?: number;
    /**
     * 
     * @type {String}
     * @memberof RpcStatus
     */
    'message'?: String;
    /**
     * 
     * @type {Array<ProtobufAny>}
     * @memberof RpcStatus
     */
    'details'?: Array<ProtobufAny>;
}
/**
 * 
 * @export
 * @interface V1AddPostToCollectionResponse
 */
export interface V1AddPostToCollectionResponse {
    /**
     * 
     * @type {V1Collection}
     * @memberof V1AddPostToCollectionResponse
     */
    'collection'?: V1Collection;
}
/**
 * 
 * @export
 * @interface V1Collection
 */
export interface V1Collection {
    /**
     * 
     * @type {Array<V1Post>}
     * @memberof V1Collection
     */
    'posts'?: Array<V1Post>;
}
/**
 * 
 * @export
 * @interface V1CreateCollectionRequest
 */
export interface V1CreateCollectionRequest {
    /**
     * 
     * @type {Array<V1Post>}
     * @memberof V1CreateCollectionRequest
     */
    'posts'?: Array<V1Post>;
}
/**
 * 
 * @export
 * @interface V1CreateCollectionResponse
 */
export interface V1CreateCollectionResponse {
    /**
     * 
     * @type {V1Collection}
     * @memberof V1CreateCollectionResponse
     */
    'collection'?: V1Collection;
}
/**
 * 
 * @export
 * @interface V1CreatePostRequest
 */
export interface V1CreatePostRequest {
    /**
     * 
     * @type {String}
     * @memberof V1CreatePostRequest
     */
    'title'?: String;
    /**
     * 
     * @type {String}
     * @memberof V1CreatePostRequest
     */
    'content'?: String;
}
/**
 * 
 * @export
 * @interface V1CreatePostResponse
 */
export interface V1CreatePostResponse {
    /**
     * 
     * @type {V1Post}
     * @memberof V1CreatePostResponse
     */
    'post'?: V1Post;
}
/**
 * 
 * @export
 * @interface V1DeleteCollectionResponse
 */
export interface V1DeleteCollectionResponse {
    /**
     * 
     * @type {String}
     * @memberof V1DeleteCollectionResponse
     */
    'id'?: String;
}
/**
 * 
 * @export
 * @interface V1DeletePostResponse
 */
export interface V1DeletePostResponse {
    /**
     * 
     * @type {String}
     * @memberof V1DeletePostResponse
     */
    'id'?: String;
}
/**
 * 
 * @export
 * @interface V1GetCollectionResponse
 */
export interface V1GetCollectionResponse {
    /**
     * 
     * @type {V1Collection}
     * @memberof V1GetCollectionResponse
     */
    'collection'?: V1Collection;
}
/**
 * 
 * @export
 * @interface V1GetPostResponse
 */
export interface V1GetPostResponse {
    /**
     * 
     * @type {V1Post}
     * @memberof V1GetPostResponse
     */
    'post'?: V1Post;
}
/**
 * 
 * @export
 * @interface V1ListCollectionResponse
 */
export interface V1ListCollectionResponse {
    /**
     * 
     * @type {Array<V1Collection>}
     * @memberof V1ListCollectionResponse
     */
    'collections'?: Array<V1Collection>;
}
/**
 * 
 * @export
 * @interface V1ListPostResponse
 */
export interface V1ListPostResponse {
    /**
     * 
     * @type {Array<V1Post>}
     * @memberof V1ListPostResponse
     */
    'posts'?: Array<V1Post>;
}
/**
 * 
 * @export
 * @interface V1Post
 */
export interface V1Post {
    /**
     * 
     * @type {String}
     * @memberof V1Post
     */
    'id'?: String;
    /**
     * 
     * @type {String}
     * @memberof V1Post
     */
    'title'?: String;
    /**
     * 
     * @type {String}
     * @memberof V1Post
     */
    'content'?: String;
    /**
     * 
     * @type {String}
     * @memberof V1Post
     */
    'shortContent'?: String;
    /**
     * 
     * @type {String}
     * @memberof V1Post
     */
    'thumbnail'?: String;
    /**
     * 
     * @type {String}
     * @memberof V1Post
     */
    'status'?: String;
    /**
     * 
     * @type {String}
     * @memberof V1Post
     */
    'createdAt'?: String;
    /**
     * 
     * @type {String}
     * @memberof V1Post
     */
    'updatedAt'?: String;
}
/**
 * 
 * @export
 * @interface V1RemovePostFromCollectionResponse
 */
export interface V1RemovePostFromCollectionResponse {
    /**
     * 
     * @type {V1Collection}
     * @memberof V1RemovePostFromCollectionResponse
     */
    'collection'?: V1Collection;
}
/**
 * 
 * @export
 * @interface V1UpdateCollectionResponse
 */
export interface V1UpdateCollectionResponse {
    /**
     * 
     * @type {V1Collection}
     * @memberof V1UpdateCollectionResponse
     */
    'collection'?: V1Collection;
}
/**
 * 
 * @export
 * @interface V1UpdatePostResponse
 */
export interface V1UpdatePostResponse {
    /**
     * 
     * @type {V1Post}
     * @memberof V1UpdatePostResponse
     */
    'post'?: V1Post;
}

/**
 * CollectionServiceApi - axios parameter creator
 * @export
 */
export const CollectionServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {String} collection_id 
         * @param {String} post_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionServiceAddPostToCollection: async (collection_id: String, post_id: String, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collection_id' is not null or undefined
            assertParamExists('collectionServiceAddPostToCollection', 'collection_id', collection_id)
            // verify required parameter 'post_id' is not null or undefined
            assertParamExists('collectionServiceAddPostToCollection', 'post_id', post_id)
            const localVarPath = `/v1/collections/{collectionId}/posts/{postId}`
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collection_id)))
                .replace(`{${"postId"}}`, encodeURIComponent(String(post_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {V1CreateCollectionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionServiceCreateCollection: async (body: V1CreateCollectionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('collectionServiceCreateCollection', 'body', body)
            const localVarPath = `/v1/collections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {String} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionServiceDeleteCollection: async (id: String, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('collectionServiceDeleteCollection', 'id', id)
            const localVarPath = `/v1/collections/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {String} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionServiceGetCollection: async (id: String, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('collectionServiceGetCollection', 'id', id)
            const localVarPath = `/v1/collections/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [per_page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionServiceListCollection: async (page?: number, per_page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/collections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (per_page !== undefined) {
                localVarQueryParameter['perPage'] = per_page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {String} collection_id 
         * @param {String} post_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionServiceRemovePostFromCollection: async (collection_id: String, post_id: String, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collection_id' is not null or undefined
            assertParamExists('collectionServiceRemovePostFromCollection', 'collection_id', collection_id)
            // verify required parameter 'post_id' is not null or undefined
            assertParamExists('collectionServiceRemovePostFromCollection', 'post_id', post_id)
            const localVarPath = `/v1/collections/{collectionId}/posts/{postId}`
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collection_id)))
                .replace(`{${"postId"}}`, encodeURIComponent(String(post_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {String} id 
         * @param {CollectionServiceUpdateCollectionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionServiceUpdateCollection: async (id: String, body: CollectionServiceUpdateCollectionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('collectionServiceUpdateCollection', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('collectionServiceUpdateCollection', 'body', body)
            const localVarPath = `/v1/collections/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CollectionServiceApi - functional programming interface
 * @export
 */
export const CollectionServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CollectionServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {String} collection_id 
         * @param {String} post_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionServiceAddPostToCollection(collection_id: String, post_id: String, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AddPostToCollectionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionServiceAddPostToCollection(collection_id, post_id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CollectionServiceApi.collectionServiceAddPostToCollection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {V1CreateCollectionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionServiceCreateCollection(body: V1CreateCollectionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1CreateCollectionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionServiceCreateCollection(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CollectionServiceApi.collectionServiceCreateCollection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {String} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionServiceDeleteCollection(id: String, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1DeleteCollectionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionServiceDeleteCollection(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CollectionServiceApi.collectionServiceDeleteCollection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {String} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionServiceGetCollection(id: String, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1GetCollectionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionServiceGetCollection(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CollectionServiceApi.collectionServiceGetCollection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [per_page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionServiceListCollection(page?: number, per_page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ListCollectionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionServiceListCollection(page, per_page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CollectionServiceApi.collectionServiceListCollection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {String} collection_id 
         * @param {String} post_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionServiceRemovePostFromCollection(collection_id: String, post_id: String, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1RemovePostFromCollectionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionServiceRemovePostFromCollection(collection_id, post_id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CollectionServiceApi.collectionServiceRemovePostFromCollection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {String} id 
         * @param {CollectionServiceUpdateCollectionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionServiceUpdateCollection(id: String, body: CollectionServiceUpdateCollectionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1UpdateCollectionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionServiceUpdateCollection(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CollectionServiceApi.collectionServiceUpdateCollection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CollectionServiceApi - factory interface
 * @export
 */
export const CollectionServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CollectionServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {CollectionServiceApiCollectionServiceAddPostToCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionServiceAddPostToCollection(requestParameters: CollectionServiceApiCollectionServiceAddPostToCollectionRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1AddPostToCollectionResponse> {
            return localVarFp.collectionServiceAddPostToCollection(requestParameters.collection_id, requestParameters.post_id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CollectionServiceApiCollectionServiceCreateCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionServiceCreateCollection(requestParameters: CollectionServiceApiCollectionServiceCreateCollectionRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1CreateCollectionResponse> {
            return localVarFp.collectionServiceCreateCollection(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CollectionServiceApiCollectionServiceDeleteCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionServiceDeleteCollection(requestParameters: CollectionServiceApiCollectionServiceDeleteCollectionRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1DeleteCollectionResponse> {
            return localVarFp.collectionServiceDeleteCollection(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CollectionServiceApiCollectionServiceGetCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionServiceGetCollection(requestParameters: CollectionServiceApiCollectionServiceGetCollectionRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1GetCollectionResponse> {
            return localVarFp.collectionServiceGetCollection(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CollectionServiceApiCollectionServiceListCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionServiceListCollection(requestParameters: CollectionServiceApiCollectionServiceListCollectionRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<V1ListCollectionResponse> {
            return localVarFp.collectionServiceListCollection(requestParameters.page, requestParameters.per_page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CollectionServiceApiCollectionServiceRemovePostFromCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionServiceRemovePostFromCollection(requestParameters: CollectionServiceApiCollectionServiceRemovePostFromCollectionRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1RemovePostFromCollectionResponse> {
            return localVarFp.collectionServiceRemovePostFromCollection(requestParameters.collection_id, requestParameters.post_id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CollectionServiceApiCollectionServiceUpdateCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionServiceUpdateCollection(requestParameters: CollectionServiceApiCollectionServiceUpdateCollectionRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1UpdateCollectionResponse> {
            return localVarFp.collectionServiceUpdateCollection(requestParameters.id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for collectionServiceAddPostToCollection operation in CollectionServiceApi.
 * @export
 * @interface CollectionServiceApiCollectionServiceAddPostToCollectionRequest
 */
export interface CollectionServiceApiCollectionServiceAddPostToCollectionRequest {
    /**
     * 
     * @type {String}
     * @memberof CollectionServiceApiCollectionServiceAddPostToCollection
     */
    readonly collection_id: String

    /**
     * 
     * @type {String}
     * @memberof CollectionServiceApiCollectionServiceAddPostToCollection
     */
    readonly post_id: String
}

/**
 * Request parameters for collectionServiceCreateCollection operation in CollectionServiceApi.
 * @export
 * @interface CollectionServiceApiCollectionServiceCreateCollectionRequest
 */
export interface CollectionServiceApiCollectionServiceCreateCollectionRequest {
    /**
     * 
     * @type {V1CreateCollectionRequest}
     * @memberof CollectionServiceApiCollectionServiceCreateCollection
     */
    readonly body: V1CreateCollectionRequest
}

/**
 * Request parameters for collectionServiceDeleteCollection operation in CollectionServiceApi.
 * @export
 * @interface CollectionServiceApiCollectionServiceDeleteCollectionRequest
 */
export interface CollectionServiceApiCollectionServiceDeleteCollectionRequest {
    /**
     * 
     * @type {String}
     * @memberof CollectionServiceApiCollectionServiceDeleteCollection
     */
    readonly id: String
}

/**
 * Request parameters for collectionServiceGetCollection operation in CollectionServiceApi.
 * @export
 * @interface CollectionServiceApiCollectionServiceGetCollectionRequest
 */
export interface CollectionServiceApiCollectionServiceGetCollectionRequest {
    /**
     * 
     * @type {String}
     * @memberof CollectionServiceApiCollectionServiceGetCollection
     */
    readonly id: String
}

/**
 * Request parameters for collectionServiceListCollection operation in CollectionServiceApi.
 * @export
 * @interface CollectionServiceApiCollectionServiceListCollectionRequest
 */
export interface CollectionServiceApiCollectionServiceListCollectionRequest {
    /**
     * 
     * @type {number}
     * @memberof CollectionServiceApiCollectionServiceListCollection
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof CollectionServiceApiCollectionServiceListCollection
     */
    readonly per_page?: number
}

/**
 * Request parameters for collectionServiceRemovePostFromCollection operation in CollectionServiceApi.
 * @export
 * @interface CollectionServiceApiCollectionServiceRemovePostFromCollectionRequest
 */
export interface CollectionServiceApiCollectionServiceRemovePostFromCollectionRequest {
    /**
     * 
     * @type {String}
     * @memberof CollectionServiceApiCollectionServiceRemovePostFromCollection
     */
    readonly collection_id: String

    /**
     * 
     * @type {String}
     * @memberof CollectionServiceApiCollectionServiceRemovePostFromCollection
     */
    readonly post_id: String
}

/**
 * Request parameters for collectionServiceUpdateCollection operation in CollectionServiceApi.
 * @export
 * @interface CollectionServiceApiCollectionServiceUpdateCollectionRequest
 */
export interface CollectionServiceApiCollectionServiceUpdateCollectionRequest {
    /**
     * 
     * @type {String}
     * @memberof CollectionServiceApiCollectionServiceUpdateCollection
     */
    readonly id: String

    /**
     * 
     * @type {CollectionServiceUpdateCollectionRequest}
     * @memberof CollectionServiceApiCollectionServiceUpdateCollection
     */
    readonly body: CollectionServiceUpdateCollectionRequest
}

/**
 * CollectionServiceApi - object-oriented interface
 * @export
 * @class CollectionServiceApi
 * @extends {BaseAPI}
 */
export class CollectionServiceApi extends BaseAPI {
    /**
     * 
     * @param {CollectionServiceApiCollectionServiceAddPostToCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionServiceApi
     */
    public collectionServiceAddPostToCollection(requestParameters: CollectionServiceApiCollectionServiceAddPostToCollectionRequest, options?: RawAxiosRequestConfig) {
        return CollectionServiceApiFp(this.configuration).collectionServiceAddPostToCollection(requestParameters.collection_id, requestParameters.post_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CollectionServiceApiCollectionServiceCreateCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionServiceApi
     */
    public collectionServiceCreateCollection(requestParameters: CollectionServiceApiCollectionServiceCreateCollectionRequest, options?: RawAxiosRequestConfig) {
        return CollectionServiceApiFp(this.configuration).collectionServiceCreateCollection(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CollectionServiceApiCollectionServiceDeleteCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionServiceApi
     */
    public collectionServiceDeleteCollection(requestParameters: CollectionServiceApiCollectionServiceDeleteCollectionRequest, options?: RawAxiosRequestConfig) {
        return CollectionServiceApiFp(this.configuration).collectionServiceDeleteCollection(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CollectionServiceApiCollectionServiceGetCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionServiceApi
     */
    public collectionServiceGetCollection(requestParameters: CollectionServiceApiCollectionServiceGetCollectionRequest, options?: RawAxiosRequestConfig) {
        return CollectionServiceApiFp(this.configuration).collectionServiceGetCollection(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CollectionServiceApiCollectionServiceListCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionServiceApi
     */
    public collectionServiceListCollection(requestParameters: CollectionServiceApiCollectionServiceListCollectionRequest = {}, options?: RawAxiosRequestConfig) {
        return CollectionServiceApiFp(this.configuration).collectionServiceListCollection(requestParameters.page, requestParameters.per_page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CollectionServiceApiCollectionServiceRemovePostFromCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionServiceApi
     */
    public collectionServiceRemovePostFromCollection(requestParameters: CollectionServiceApiCollectionServiceRemovePostFromCollectionRequest, options?: RawAxiosRequestConfig) {
        return CollectionServiceApiFp(this.configuration).collectionServiceRemovePostFromCollection(requestParameters.collection_id, requestParameters.post_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CollectionServiceApiCollectionServiceUpdateCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionServiceApi
     */
    public collectionServiceUpdateCollection(requestParameters: CollectionServiceApiCollectionServiceUpdateCollectionRequest, options?: RawAxiosRequestConfig) {
        return CollectionServiceApiFp(this.configuration).collectionServiceUpdateCollection(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PostServiceApi - axios parameter creator
 * @export
 */
export const PostServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {V1CreatePostRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postServiceCreatePost: async (body: V1CreatePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('postServiceCreatePost', 'body', body)
            const localVarPath = `/v1/posts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {String} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postServiceDeletePost: async (id: String, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postServiceDeletePost', 'id', id)
            const localVarPath = `/v1/posts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {String} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postServiceGetPost: async (id: String, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postServiceGetPost', 'id', id)
            const localVarPath = `/v1/posts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [per_page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postServiceListPost: async (page?: number, per_page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/posts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (per_page !== undefined) {
                localVarQueryParameter['perPage'] = per_page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {String} id 
         * @param {PostServiceUpdatePostRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postServiceUpdatePost: async (id: String, body: PostServiceUpdatePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postServiceUpdatePost', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('postServiceUpdatePost', 'body', body)
            const localVarPath = `/v1/posts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PostServiceApi - functional programming interface
 * @export
 */
export const PostServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PostServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {V1CreatePostRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postServiceCreatePost(body: V1CreatePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1CreatePostResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postServiceCreatePost(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PostServiceApi.postServiceCreatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {String} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postServiceDeletePost(id: String, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1DeletePostResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postServiceDeletePost(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PostServiceApi.postServiceDeletePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {String} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postServiceGetPost(id: String, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1GetPostResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postServiceGetPost(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PostServiceApi.postServiceGetPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [per_page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postServiceListPost(page?: number, per_page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ListPostResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postServiceListPost(page, per_page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PostServiceApi.postServiceListPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {String} id 
         * @param {PostServiceUpdatePostRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postServiceUpdatePost(id: String, body: PostServiceUpdatePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1UpdatePostResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postServiceUpdatePost(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PostServiceApi.postServiceUpdatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PostServiceApi - factory interface
 * @export
 */
export const PostServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PostServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {PostServiceApiPostServiceCreatePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postServiceCreatePost(requestParameters: PostServiceApiPostServiceCreatePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1CreatePostResponse> {
            return localVarFp.postServiceCreatePost(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PostServiceApiPostServiceDeletePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postServiceDeletePost(requestParameters: PostServiceApiPostServiceDeletePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1DeletePostResponse> {
            return localVarFp.postServiceDeletePost(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PostServiceApiPostServiceGetPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postServiceGetPost(requestParameters: PostServiceApiPostServiceGetPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1GetPostResponse> {
            return localVarFp.postServiceGetPost(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PostServiceApiPostServiceListPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postServiceListPost(requestParameters: PostServiceApiPostServiceListPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<V1ListPostResponse> {
            return localVarFp.postServiceListPost(requestParameters.page, requestParameters.per_page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PostServiceApiPostServiceUpdatePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postServiceUpdatePost(requestParameters: PostServiceApiPostServiceUpdatePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1UpdatePostResponse> {
            return localVarFp.postServiceUpdatePost(requestParameters.id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for postServiceCreatePost operation in PostServiceApi.
 * @export
 * @interface PostServiceApiPostServiceCreatePostRequest
 */
export interface PostServiceApiPostServiceCreatePostRequest {
    /**
     * 
     * @type {V1CreatePostRequest}
     * @memberof PostServiceApiPostServiceCreatePost
     */
    readonly body: V1CreatePostRequest
}

/**
 * Request parameters for postServiceDeletePost operation in PostServiceApi.
 * @export
 * @interface PostServiceApiPostServiceDeletePostRequest
 */
export interface PostServiceApiPostServiceDeletePostRequest {
    /**
     * 
     * @type {String}
     * @memberof PostServiceApiPostServiceDeletePost
     */
    readonly id: String
}

/**
 * Request parameters for postServiceGetPost operation in PostServiceApi.
 * @export
 * @interface PostServiceApiPostServiceGetPostRequest
 */
export interface PostServiceApiPostServiceGetPostRequest {
    /**
     * 
     * @type {String}
     * @memberof PostServiceApiPostServiceGetPost
     */
    readonly id: String
}

/**
 * Request parameters for postServiceListPost operation in PostServiceApi.
 * @export
 * @interface PostServiceApiPostServiceListPostRequest
 */
export interface PostServiceApiPostServiceListPostRequest {
    /**
     * 
     * @type {number}
     * @memberof PostServiceApiPostServiceListPost
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof PostServiceApiPostServiceListPost
     */
    readonly per_page?: number
}

/**
 * Request parameters for postServiceUpdatePost operation in PostServiceApi.
 * @export
 * @interface PostServiceApiPostServiceUpdatePostRequest
 */
export interface PostServiceApiPostServiceUpdatePostRequest {
    /**
     * 
     * @type {String}
     * @memberof PostServiceApiPostServiceUpdatePost
     */
    readonly id: String

    /**
     * 
     * @type {PostServiceUpdatePostRequest}
     * @memberof PostServiceApiPostServiceUpdatePost
     */
    readonly body: PostServiceUpdatePostRequest
}

/**
 * PostServiceApi - object-oriented interface
 * @export
 * @class PostServiceApi
 * @extends {BaseAPI}
 */
export class PostServiceApi extends BaseAPI {
    /**
     * 
     * @param {PostServiceApiPostServiceCreatePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostServiceApi
     */
    public postServiceCreatePost(requestParameters: PostServiceApiPostServiceCreatePostRequest, options?: RawAxiosRequestConfig) {
        return PostServiceApiFp(this.configuration).postServiceCreatePost(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PostServiceApiPostServiceDeletePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostServiceApi
     */
    public postServiceDeletePost(requestParameters: PostServiceApiPostServiceDeletePostRequest, options?: RawAxiosRequestConfig) {
        return PostServiceApiFp(this.configuration).postServiceDeletePost(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PostServiceApiPostServiceGetPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostServiceApi
     */
    public postServiceGetPost(requestParameters: PostServiceApiPostServiceGetPostRequest, options?: RawAxiosRequestConfig) {
        return PostServiceApiFp(this.configuration).postServiceGetPost(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PostServiceApiPostServiceListPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostServiceApi
     */
    public postServiceListPost(requestParameters: PostServiceApiPostServiceListPostRequest = {}, options?: RawAxiosRequestConfig) {
        return PostServiceApiFp(this.configuration).postServiceListPost(requestParameters.page, requestParameters.per_page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PostServiceApiPostServiceUpdatePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostServiceApi
     */
    public postServiceUpdatePost(requestParameters: PostServiceApiPostServiceUpdatePostRequest, options?: RawAxiosRequestConfig) {
        return PostServiceApiFp(this.configuration).postServiceUpdatePost(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}



