/* tslint:disable */
/* eslint-disable */
/**
 * apis/v1/unstak.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * Tags are application wide unique identifiers for categorizing content.
 * @export
 * @interface Apisv1Tag
 */
export interface Apisv1Tag {
    /**
     * 
     * @type {string}
     * @memberof Apisv1Tag
     */
    'spaceId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Apisv1Tag
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Apisv1Tag
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Apisv1Tag
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Apisv1Tag
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface PageServiceUpdatePageRequest
 */
export interface PageServiceUpdatePageRequest {
    /**
     * 
     * @type {string}
     * @memberof PageServiceUpdatePageRequest
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof PageServiceUpdatePageRequest
     */
    'content'?: string;
    /**
     * 
     * @type {string}
     * @memberof PageServiceUpdatePageRequest
     */
    'parts'?: string;
    /**
     * 
     * @type {string}
     * @memberof PageServiceUpdatePageRequest
     */
    'summary'?: string;
    /**
     * 
     * @type {string}
     * @memberof PageServiceUpdatePageRequest
     */
    'excerpt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PageServiceUpdatePageRequest
     */
    'thumbnail'?: string;
    /**
     * 
     * @type {string}
     * @memberof PageServiceUpdatePageRequest
     */
    'version'?: string;
}
/**
 * 
 * @export
 * @interface PostServiceUpdatePostReactionRequest
 */
export interface PostServiceUpdatePostReactionRequest {
    /**
     * 
     * @type {string}
     * @memberof PostServiceUpdatePostReactionRequest
     */
    'reactionName'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PostServiceUpdatePostReactionRequest
     */
    'count'?: boolean;
}
/**
 * 
 * @export
 * @interface PostServiceUpdatePostRequest
 */
export interface PostServiceUpdatePostRequest {
    /**
     * 
     * @type {string}
     * @memberof PostServiceUpdatePostRequest
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostServiceUpdatePostRequest
     */
    'content'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostServiceUpdatePostRequest
     */
    'thumbnail'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostServiceUpdatePostRequest
     */
    'summary'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostServiceUpdatePostRequest
     */
    'excerpt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostServiceUpdatePostRequest
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostServiceUpdatePostRequest
     */
    'authors'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostServiceUpdatePostRequest
     */
    'slug'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostServiceUpdatePostRequest
     */
    'version'?: string;
}
/**
 * 
 * @export
 * @interface PostServiceUpdatePostStatusRequest
 */
export interface PostServiceUpdatePostStatusRequest {
    /**
     * 
     * @type {V1PostStatus}
     * @memberof PostServiceUpdatePostStatusRequest
     */
    'status'?: V1PostStatus;
}


/**
 * 
 * @export
 * @interface ProtobufAny
 */
export interface ProtobufAny {
    [key: string]: object | any;

    /**
     * 
     * @type {string}
     * @memberof ProtobufAny
     */
    '@type'?: string;
}
/**
 * 
 * @export
 * @interface RpcStatus
 */
export interface RpcStatus {
    /**
     * 
     * @type {number}
     * @memberof RpcStatus
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof RpcStatus
     */
    'message'?: string;
    /**
     * 
     * @type {Array<ProtobufAny>}
     * @memberof RpcStatus
     */
    'details'?: Array<ProtobufAny>;
}
/**
 * 
 * @export
 * @interface TagServiceUpdateTagRequest
 */
export interface TagServiceUpdateTagRequest {
    /**
     * 
     * @type {string}
     * @memberof TagServiceUpdateTagRequest
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface TierMemberServiceUpdateTierMemberRequest
 */
export interface TierMemberServiceUpdateTierMemberRequest {
    /**
     * 
     * @type {string}
     * @memberof TierMemberServiceUpdateTierMemberRequest
     */
    'role'?: string;
}
/**
 * 
 * @export
 * @interface TierServiceUpdateTierRequest
 */
export interface TierServiceUpdateTierRequest {
    /**
     * 
     * @type {string}
     * @memberof TierServiceUpdateTierRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof TierServiceUpdateTierRequest
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface V1Account
 */
export interface V1Account {
    /**
     * 
     * @type {string}
     * @memberof V1Account
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Account
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Account
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Account
     */
    'avatar'?: string;
    /**
     * 
     * @type {V1UserRole}
     * @memberof V1Account
     */
    'role'?: V1UserRole;
    /**
     * 
     * @type {string}
     * @memberof V1Account
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Account
     */
    'updatedAt'?: string;
}


/**
 * 
 * @export
 * @interface V1AddCourseTagResponse
 */
export interface V1AddCourseTagResponse {
    /**
     * 
     * @type {V1Course}
     * @memberof V1AddCourseTagResponse
     */
    'course'?: V1Course;
}
/**
 * 
 * @export
 * @interface V1AddPageTagResponse
 */
export interface V1AddPageTagResponse {
    /**
     * 
     * @type {V1Page}
     * @memberof V1AddPageTagResponse
     */
    'page'?: V1Page;
}
/**
 * 
 * @export
 * @interface V1AddPostTagResponse
 */
export interface V1AddPostTagResponse {
    /**
     * 
     * @type {V1Post}
     * @memberof V1AddPostTagResponse
     */
    'post'?: V1Post;
}
/**
 * 
 * @export
 * @interface V1AuthToken
 */
export interface V1AuthToken {
    /**
     * 
     * @type {string}
     * @memberof V1AuthToken
     */
    'accessToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1AuthToken
     */
    'refreshToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1AuthToken
     */
    'tokenType'?: string;
    /**
     * 
     * @type {number}
     * @memberof V1AuthToken
     */
    'expiresIn'?: number;
    /**
     * 
     * @type {number}
     * @memberof V1AuthToken
     */
    'expiresAt'?: number;
}
/**
 * 
 * @export
 * @interface V1Course
 */
export interface V1Course {
    /**
     * 
     * @type {string}
     * @memberof V1Course
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Course
     */
    'coverPageId'?: string;
    /**
     * 
     * @type {V1Page}
     * @memberof V1Course
     */
    'coverPage'?: V1Page;
    /**
     * 
     * @type {string}
     * @memberof V1Course
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Course
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Course
     */
    'createdById'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Course
     */
    'version'?: string;
    /**
     * 
     * @type {Array<Apisv1Tag>}
     * @memberof V1Course
     */
    'tags'?: Array<Apisv1Tag>;
    /**
     * 
     * @type {string}
     * @memberof V1Course
     */
    'spaceId'?: string;
}
/**
 * 
 * @export
 * @interface V1CreateAccountRequest
 */
export interface V1CreateAccountRequest {
    /**
     * 
     * @type {string}
     * @memberof V1CreateAccountRequest
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1CreateAccountRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1CreateAccountRequest
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface V1CreateAccountResponse
 */
export interface V1CreateAccountResponse {
    /**
     * 
     * @type {V1Account}
     * @memberof V1CreateAccountResponse
     */
    'account'?: V1Account;
}
/**
 * 
 * @export
 * @interface V1CreateCourseRequest
 */
export interface V1CreateCourseRequest {
    /**
     * 
     * @type {string}
     * @memberof V1CreateCourseRequest
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1CreateCourseRequest
     */
    'content'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1CreateCourseRequest
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1CreateCourseRequest
     */
    'thumbnail'?: string;
}
/**
 * 
 * @export
 * @interface V1CreateCourseResponse
 */
export interface V1CreateCourseResponse {
    /**
     * 
     * @type {V1Course}
     * @memberof V1CreateCourseResponse
     */
    'course'?: V1Course;
}
/**
 * 
 * @export
 * @interface V1CreatePageRequest
 */
export interface V1CreatePageRequest {
    /**
     * 
     * @type {string}
     * @memberof V1CreatePageRequest
     */
    'courseId'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1CreatePageRequest
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1CreatePageRequest
     */
    'content'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1CreatePageRequest
     */
    'thumbnail'?: string;
}
/**
 * 
 * @export
 * @interface V1CreatePageResponse
 */
export interface V1CreatePageResponse {
    /**
     * 
     * @type {V1Page}
     * @memberof V1CreatePageResponse
     */
    'page'?: V1Page;
}
/**
 * 
 * @export
 * @interface V1CreatePostRequest
 */
export interface V1CreatePostRequest {
    /**
     * 
     * @type {string}
     * @memberof V1CreatePostRequest
     */
    'postId'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1CreatePostRequest
     */
    'slug'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1CreatePostRequest
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1CreatePostRequest
     */
    'content'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1CreatePostRequest
     */
    'summary'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1CreatePostRequest
     */
    'excerpt'?: string;
}
/**
 * 
 * @export
 * @interface V1CreatePostResponse
 */
export interface V1CreatePostResponse {
    /**
     * 
     * @type {V1Post}
     * @memberof V1CreatePostResponse
     */
    'post'?: V1Post;
}
/**
 * 
 * @export
 * @interface V1CreateTagRequest
 */
export interface V1CreateTagRequest {
    /**
     * 
     * @type {string}
     * @memberof V1CreateTagRequest
     */
    'spaceId'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1CreateTagRequest
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface V1CreateTagResponse
 */
export interface V1CreateTagResponse {
    /**
     * 
     * @type {Apisv1Tag}
     * @memberof V1CreateTagResponse
     */
    'tag'?: Apisv1Tag;
}
/**
 * 
 * @export
 * @interface V1CreateTierMemberRequest
 */
export interface V1CreateTierMemberRequest {
    /**
     * 
     * @type {string}
     * @memberof V1CreateTierMemberRequest
     */
    'tierId'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1CreateTierMemberRequest
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1CreateTierMemberRequest
     */
    'role'?: string;
}
/**
 * 
 * @export
 * @interface V1CreateTierMemberResponse
 */
export interface V1CreateTierMemberResponse {
    /**
     * 
     * @type {V1TierMember}
     * @memberof V1CreateTierMemberResponse
     */
    'tierPermission'?: V1TierMember;
}
/**
 * 
 * @export
 * @interface V1CreateTierRequest
 */
export interface V1CreateTierRequest {
    /**
     * 
     * @type {string}
     * @memberof V1CreateTierRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1CreateTierRequest
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface V1CreateTierResponse
 */
export interface V1CreateTierResponse {
    /**
     * 
     * @type {V1Tier}
     * @memberof V1CreateTierResponse
     */
    'tier'?: V1Tier;
}
/**
 * 
 * @export
 * @interface V1DeleteCourseResponse
 */
export interface V1DeleteCourseResponse {
    /**
     * 
     * @type {string}
     * @memberof V1DeleteCourseResponse
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface V1DeletePageResponse
 */
export interface V1DeletePageResponse {
    /**
     * 
     * @type {string}
     * @memberof V1DeletePageResponse
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface V1DeletePostResponse
 */
export interface V1DeletePostResponse {
    /**
     * 
     * @type {string}
     * @memberof V1DeletePostResponse
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface V1DeleteTagResponse
 */
export interface V1DeleteTagResponse {
    /**
     * 
     * @type {string}
     * @memberof V1DeleteTagResponse
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface V1DeleteTierMemberResponse
 */
export interface V1DeleteTierMemberResponse {
    /**
     * 
     * @type {string}
     * @memberof V1DeleteTierMemberResponse
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface V1DeleteTierResponse
 */
export interface V1DeleteTierResponse {
    /**
     * 
     * @type {string}
     * @memberof V1DeleteTierResponse
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface V1DownloadFileURLResponse
 */
export interface V1DownloadFileURLResponse {
    /**
     * 
     * @type {string}
     * @memberof V1DownloadFileURLResponse
     */
    'url'?: string;
}
/**
 * 
 * @export
 * @interface V1GetCourseResponse
 */
export interface V1GetCourseResponse {
    /**
     * 
     * @type {V1Course}
     * @memberof V1GetCourseResponse
     */
    'course'?: V1Course;
}
/**
 * 
 * @export
 * @interface V1GetPageResponse
 */
export interface V1GetPageResponse {
    /**
     * 
     * @type {V1Page}
     * @memberof V1GetPageResponse
     */
    'page'?: V1Page;
}
/**
 * 
 * @export
 * @interface V1GetPostBySlagResponse
 */
export interface V1GetPostBySlagResponse {
    /**
     * 
     * @type {V1Post}
     * @memberof V1GetPostBySlagResponse
     */
    'post'?: V1Post;
}
/**
 * 
 * @export
 * @interface V1GetPostResponse
 */
export interface V1GetPostResponse {
    /**
     * 
     * @type {V1Post}
     * @memberof V1GetPostResponse
     */
    'post'?: V1Post;
}
/**
 * 
 * @export
 * @interface V1GetTagResponse
 */
export interface V1GetTagResponse {
    /**
     * 
     * @type {Apisv1Tag}
     * @memberof V1GetTagResponse
     */
    'tag'?: Apisv1Tag;
}
/**
 * 
 * @export
 * @interface V1GetTierMemberResponse
 */
export interface V1GetTierMemberResponse {
    /**
     * 
     * @type {V1TierMember}
     * @memberof V1GetTierMemberResponse
     */
    'member'?: V1TierMember;
}
/**
 * 
 * @export
 * @interface V1GetTierResponse
 */
export interface V1GetTierResponse {
    /**
     * 
     * @type {V1Tier}
     * @memberof V1GetTierResponse
     */
    'tier'?: V1Tier;
}
/**
 * 
 * @export
 * @interface V1ListCourseResponse
 */
export interface V1ListCourseResponse {
    /**
     * 
     * @type {Array<V1Course>}
     * @memberof V1ListCourseResponse
     */
    'courses'?: Array<V1Course>;
}
/**
 * 
 * @export
 * @interface V1ListPostResponse
 */
export interface V1ListPostResponse {
    /**
     * 
     * @type {Array<V1Post>}
     * @memberof V1ListPostResponse
     */
    'posts'?: Array<V1Post>;
}
/**
 * 
 * @export
 * @interface V1ListTagResponse
 */
export interface V1ListTagResponse {
    /**
     * 
     * @type {Array<Apisv1Tag>}
     * @memberof V1ListTagResponse
     */
    'tags'?: Array<Apisv1Tag>;
}
/**
 * 
 * @export
 * @interface V1ListTierMemberResponse
 */
export interface V1ListTierMemberResponse {
    /**
     * 
     * @type {Array<V1TierMember>}
     * @memberof V1ListTierMemberResponse
     */
    'members'?: Array<V1TierMember>;
}
/**
 * 
 * @export
 * @interface V1ListTiersResponse
 */
export interface V1ListTiersResponse {
    /**
     * 
     * @type {Array<V1Tier>}
     * @memberof V1ListTiersResponse
     */
    'tiers'?: Array<V1Tier>;
}
/**
 * 
 * @export
 * @interface V1LoginRequest
 */
export interface V1LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof V1LoginRequest
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1LoginRequest
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1LoginRequest
     */
    'clientId'?: string;
}
/**
 * 
 * @export
 * @interface V1LoginResponse
 */
export interface V1LoginResponse {
    /**
     * 
     * @type {V1AuthToken}
     * @memberof V1LoginResponse
     */
    'token'?: V1AuthToken;
    /**
     * 
     * @type {V1Account}
     * @memberof V1LoginResponse
     */
    'account'?: V1Account;
}
/**
 * 
 * @export
 * @interface V1Page
 */
export interface V1Page {
    /**
     * 
     * @type {string}
     * @memberof V1Page
     */
    'courseId'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Page
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Page
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Page
     */
    'content'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Page
     */
    'summary'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Page
     */
    'excerpt'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Page
     */
    'thumbnail'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Page
     */
    'contentPages'?: string;
    /**
     * 
     * @type {Array<Apisv1Tag>}
     * @memberof V1Page
     */
    'tags'?: Array<Apisv1Tag>;
    /**
     * 
     * @type {string}
     * @memberof V1Page
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Page
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Page
     */
    'version'?: string;
    /**
     * 
     * @type {V1PostStatus}
     * @memberof V1Page
     */
    'status'?: V1PostStatus;
    /**
     * 
     * @type {string}
     * @memberof V1Page
     */
    'createdById'?: string;
}


/**
 * 
 * @export
 * @interface V1Post
 */
export interface V1Post {
    /**
     * 
     * @type {string}
     * @memberof V1Post
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Post
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Post
     */
    'content'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Post
     */
    'excerpt'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Post
     */
    'summary'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Post
     */
    'thumbnail'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Post
     */
    'slug'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Post
     */
    'featuredImage'?: string;
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof V1Post
     */
    'reaction'?: { [key: string]: number; };
    /**
     * 
     * @type {V1PostStatus}
     * @memberof V1Post
     */
    'status'?: V1PostStatus;
    /**
     * 
     * @type {Array<Apisv1Tag>}
     * @memberof V1Post
     */
    'tags'?: Array<Apisv1Tag>;
    /**
     * 
     * @type {Array<V1Account>}
     * @memberof V1Post
     */
    'authors'?: Array<V1Account>;
    /**
     * 
     * @type {string}
     * @memberof V1Post
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Post
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Post
     */
    'version'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Post
     */
    'slugId'?: string;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const V1PostStatus = {
    draft: 'DRAFT',
    published: 'PUBLISHED',
    unpublished: 'UNPUBLISHED',
    archived: 'ARCHIVED'
} as const;

export type V1PostStatus = typeof V1PostStatus[keyof typeof V1PostStatus];


/**
 * 
 * @export
 * @interface V1RemoveCourseTagResponse
 */
export interface V1RemoveCourseTagResponse {
    /**
     * 
     * @type {V1Course}
     * @memberof V1RemoveCourseTagResponse
     */
    'course'?: V1Course;
}
/**
 * 
 * @export
 * @interface V1RemovePageTagResponse
 */
export interface V1RemovePageTagResponse {
    /**
     * 
     * @type {V1Page}
     * @memberof V1RemovePageTagResponse
     */
    'page'?: V1Page;
}
/**
 * 
 * @export
 * @interface V1RemovePostTagResponse
 */
export interface V1RemovePostTagResponse {
    /**
     * 
     * @type {V1Post}
     * @memberof V1RemovePostTagResponse
     */
    'post'?: V1Post;
}
/**
 * 
 * @export
 * @interface V1SendNewsletterSubscriptionRequest
 */
export interface V1SendNewsletterSubscriptionRequest {
    /**
     * 
     * @type {string}
     * @memberof V1SendNewsletterSubscriptionRequest
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface V1SendNewsletterSubscriptionResponse
 */
export interface V1SendNewsletterSubscriptionResponse {
    /**
     * 
     * @type {string}
     * @memberof V1SendNewsletterSubscriptionResponse
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface V1Tier
 */
export interface V1Tier {
    /**
     * 
     * @type {string}
     * @memberof V1Tier
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Tier
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Tier
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Tier
     */
    'thumbnail'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Tier
     */
    'createdById'?: string;
    /**
     * 
     * @type {Array<V1TierMember>}
     * @memberof V1Tier
     */
    'members'?: Array<V1TierMember>;
    /**
     * 
     * @type {string}
     * @memberof V1Tier
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Tier
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Tier
     */
    'spaceId'?: string;
}
/**
 * 
 * @export
 * @interface V1TierMember
 */
export interface V1TierMember {
    /**
     * 
     * @type {string}
     * @memberof V1TierMember
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1TierMember
     */
    'tierId'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1TierMember
     */
    'userId'?: string;
    /**
     * 
     * @type {V1Tier}
     * @memberof V1TierMember
     */
    'tier'?: V1Tier;
    /**
     * 
     * @type {V1Account}
     * @memberof V1TierMember
     */
    'user'?: V1Account;
    /**
     * 
     * @type {string}
     * @memberof V1TierMember
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1TierMember
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface V1UpdateCourseResponse
 */
export interface V1UpdateCourseResponse {
    /**
     * 
     * @type {V1Course}
     * @memberof V1UpdateCourseResponse
     */
    'course'?: V1Course;
}
/**
 * 
 * @export
 * @interface V1UpdateFileURLResponse
 */
export interface V1UpdateFileURLResponse {
    /**
     * 
     * @type {string}
     * @memberof V1UpdateFileURLResponse
     */
    'url'?: string;
}
/**
 * 
 * @export
 * @interface V1UpdatePageResponse
 */
export interface V1UpdatePageResponse {
    /**
     * 
     * @type {V1Page}
     * @memberof V1UpdatePageResponse
     */
    'page'?: V1Page;
}
/**
 * 
 * @export
 * @interface V1UpdatePostReactionResponse
 */
export interface V1UpdatePostReactionResponse {
    /**
     * 
     * @type {V1Post}
     * @memberof V1UpdatePostReactionResponse
     */
    'post'?: V1Post;
}
/**
 * 
 * @export
 * @interface V1UpdatePostResponse
 */
export interface V1UpdatePostResponse {
    /**
     * 
     * @type {V1Post}
     * @memberof V1UpdatePostResponse
     */
    'post'?: V1Post;
}
/**
 * 
 * @export
 * @interface V1UpdatePostStatusResponse
 */
export interface V1UpdatePostStatusResponse {
    /**
     * 
     * @type {V1Post}
     * @memberof V1UpdatePostStatusResponse
     */
    'post'?: V1Post;
}
/**
 * 
 * @export
 * @interface V1UpdateTagResponse
 */
export interface V1UpdateTagResponse {
    /**
     * 
     * @type {Apisv1Tag}
     * @memberof V1UpdateTagResponse
     */
    'tag'?: Apisv1Tag;
}
/**
 * 
 * @export
 * @interface V1UpdateTierMemberResponse
 */
export interface V1UpdateTierMemberResponse {
    /**
     * 
     * @type {V1TierMember}
     * @memberof V1UpdateTierMemberResponse
     */
    'tierPermission'?: V1TierMember;
}
/**
 * 
 * @export
 * @interface V1UpdateTierResponse
 */
export interface V1UpdateTierResponse {
    /**
     * 
     * @type {V1Tier}
     * @memberof V1UpdateTierResponse
     */
    'tier'?: V1Tier;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const V1UserRole = {
    viewer: 'Viewer',
    author: 'Author',
    admin: 'Admin',
    owner: 'Owner'
} as const;

export type V1UserRole = typeof V1UserRole[keyof typeof V1UserRole];



/**
 * AccountServiceApi - axios parameter creator
 * @export
 */
export const AccountServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {V1CreateAccountRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccount: async (body: V1CreateAccountRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createAccount', 'body', body)
            const localVarPath = `/v1/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccounts: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {V1LoginRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUsingPassword: async (body: V1LoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('loginUsingPassword', 'body', body)
            const localVarPath = `/v1/accounts/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: async (body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('logout', 'body', body)
            const localVarPath = `/v1/accounts/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountServiceApi - functional programming interface
 * @export
 */
export const AccountServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {V1CreateAccountRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAccount(body: V1CreateAccountRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1CreateAccountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAccount(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountServiceApi.createAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAccounts(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAccounts(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountServiceApi.listAccounts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {V1LoginRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginUsingPassword(body: V1LoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1LoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginUsingPassword(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountServiceApi.loginUsingPassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logout(body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logout(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountServiceApi.logout']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AccountServiceApi - factory interface
 * @export
 */
export const AccountServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {AccountServiceApiCreateAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccount(requestParameters: AccountServiceApiCreateAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1CreateAccountResponse> {
            return localVarFp.createAccount(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccounts(options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.listAccounts(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AccountServiceApiLoginUsingPasswordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUsingPassword(requestParameters: AccountServiceApiLoginUsingPasswordRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1LoginResponse> {
            return localVarFp.loginUsingPassword(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AccountServiceApiLogoutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(requestParameters: AccountServiceApiLogoutRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.logout(requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createAccount operation in AccountServiceApi.
 * @export
 * @interface AccountServiceApiCreateAccountRequest
 */
export interface AccountServiceApiCreateAccountRequest {
    /**
     * 
     * @type {V1CreateAccountRequest}
     * @memberof AccountServiceApiCreateAccount
     */
    readonly body: V1CreateAccountRequest
}

/**
 * Request parameters for loginUsingPassword operation in AccountServiceApi.
 * @export
 * @interface AccountServiceApiLoginUsingPasswordRequest
 */
export interface AccountServiceApiLoginUsingPasswordRequest {
    /**
     * 
     * @type {V1LoginRequest}
     * @memberof AccountServiceApiLoginUsingPassword
     */
    readonly body: V1LoginRequest
}

/**
 * Request parameters for logout operation in AccountServiceApi.
 * @export
 * @interface AccountServiceApiLogoutRequest
 */
export interface AccountServiceApiLogoutRequest {
    /**
     * 
     * @type {object}
     * @memberof AccountServiceApiLogout
     */
    readonly body: object
}

/**
 * AccountServiceApi - object-oriented interface
 * @export
 * @class AccountServiceApi
 * @extends {BaseAPI}
 */
export class AccountServiceApi extends BaseAPI {
    /**
     * 
     * @param {AccountServiceApiCreateAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountServiceApi
     */
    public createAccount(requestParameters: AccountServiceApiCreateAccountRequest, options?: RawAxiosRequestConfig) {
        return AccountServiceApiFp(this.configuration).createAccount(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountServiceApi
     */
    public listAccounts(options?: RawAxiosRequestConfig) {
        return AccountServiceApiFp(this.configuration).listAccounts(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AccountServiceApiLoginUsingPasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountServiceApi
     */
    public loginUsingPassword(requestParameters: AccountServiceApiLoginUsingPasswordRequest, options?: RawAxiosRequestConfig) {
        return AccountServiceApiFp(this.configuration).loginUsingPassword(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AccountServiceApiLogoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountServiceApi
     */
    public logout(requestParameters: AccountServiceApiLogoutRequest, options?: RawAxiosRequestConfig) {
        return AccountServiceApiFp(this.configuration).logout(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CourseServiceApi - axios parameter creator
 * @export
 */
export const CourseServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} course_id 
         * @param {string} tag_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCourseTag: async (course_id: string, tag_id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'course_id' is not null or undefined
            assertParamExists('addCourseTag', 'course_id', course_id)
            // verify required parameter 'tag_id' is not null or undefined
            assertParamExists('addCourseTag', 'tag_id', tag_id)
            const localVarPath = `/v1/courses/{courseId}/tags/{tagId}`
                .replace(`{${"courseId"}}`, encodeURIComponent(String(course_id)))
                .replace(`{${"tagId"}}`, encodeURIComponent(String(tag_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {V1CreateCourseRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCourse: async (body: V1CreateCourseRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createCourse', 'body', body)
            const localVarPath = `/v1/courses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCourse: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteCourse', 'id', id)
            const localVarPath = `/v1/courses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourse: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCourse', 'id', id)
            const localVarPath = `/v1/courses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [per_page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCourse: async (page?: number, per_page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/courses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (per_page !== undefined) {
                localVarQueryParameter['perPage'] = per_page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} course_id 
         * @param {string} tag_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCourseTag: async (course_id: string, tag_id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'course_id' is not null or undefined
            assertParamExists('removeCourseTag', 'course_id', course_id)
            // verify required parameter 'tag_id' is not null or undefined
            assertParamExists('removeCourseTag', 'tag_id', tag_id)
            const localVarPath = `/v1/courses/{courseId}/tags/{tagId}`
                .replace(`{${"courseId"}}`, encodeURIComponent(String(course_id)))
                .replace(`{${"tagId"}}`, encodeURIComponent(String(tag_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCourse: async (id: string, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateCourse', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateCourse', 'body', body)
            const localVarPath = `/v1/courses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CourseServiceApi - functional programming interface
 * @export
 */
export const CourseServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CourseServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} course_id 
         * @param {string} tag_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCourseTag(course_id: string, tag_id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AddCourseTagResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addCourseTag(course_id, tag_id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseServiceApi.addCourseTag']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {V1CreateCourseRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCourse(body: V1CreateCourseRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1CreateCourseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCourse(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseServiceApi.createCourse']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCourse(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1DeleteCourseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCourse(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseServiceApi.deleteCourse']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCourse(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1GetCourseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCourse(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseServiceApi.getCourse']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [per_page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCourse(page?: number, per_page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ListCourseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCourse(page, per_page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseServiceApi.listCourse']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} course_id 
         * @param {string} tag_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeCourseTag(course_id: string, tag_id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1RemoveCourseTagResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeCourseTag(course_id, tag_id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseServiceApi.removeCourseTag']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCourse(id: string, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1UpdateCourseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCourse(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseServiceApi.updateCourse']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CourseServiceApi - factory interface
 * @export
 */
export const CourseServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CourseServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {CourseServiceApiAddCourseTagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCourseTag(requestParameters: CourseServiceApiAddCourseTagRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1AddCourseTagResponse> {
            return localVarFp.addCourseTag(requestParameters.course_id, requestParameters.tag_id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CourseServiceApiCreateCourseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCourse(requestParameters: CourseServiceApiCreateCourseRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1CreateCourseResponse> {
            return localVarFp.createCourse(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CourseServiceApiDeleteCourseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCourse(requestParameters: CourseServiceApiDeleteCourseRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1DeleteCourseResponse> {
            return localVarFp.deleteCourse(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CourseServiceApiGetCourseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourse(requestParameters: CourseServiceApiGetCourseRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1GetCourseResponse> {
            return localVarFp.getCourse(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CourseServiceApiListCourseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCourse(requestParameters: CourseServiceApiListCourseRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<V1ListCourseResponse> {
            return localVarFp.listCourse(requestParameters.page, requestParameters.per_page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CourseServiceApiRemoveCourseTagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCourseTag(requestParameters: CourseServiceApiRemoveCourseTagRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1RemoveCourseTagResponse> {
            return localVarFp.removeCourseTag(requestParameters.course_id, requestParameters.tag_id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CourseServiceApiUpdateCourseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCourse(requestParameters: CourseServiceApiUpdateCourseRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1UpdateCourseResponse> {
            return localVarFp.updateCourse(requestParameters.id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addCourseTag operation in CourseServiceApi.
 * @export
 * @interface CourseServiceApiAddCourseTagRequest
 */
export interface CourseServiceApiAddCourseTagRequest {
    /**
     * 
     * @type {string}
     * @memberof CourseServiceApiAddCourseTag
     */
    readonly course_id: string

    /**
     * 
     * @type {string}
     * @memberof CourseServiceApiAddCourseTag
     */
    readonly tag_id: string
}

/**
 * Request parameters for createCourse operation in CourseServiceApi.
 * @export
 * @interface CourseServiceApiCreateCourseRequest
 */
export interface CourseServiceApiCreateCourseRequest {
    /**
     * 
     * @type {V1CreateCourseRequest}
     * @memberof CourseServiceApiCreateCourse
     */
    readonly body: V1CreateCourseRequest
}

/**
 * Request parameters for deleteCourse operation in CourseServiceApi.
 * @export
 * @interface CourseServiceApiDeleteCourseRequest
 */
export interface CourseServiceApiDeleteCourseRequest {
    /**
     * 
     * @type {string}
     * @memberof CourseServiceApiDeleteCourse
     */
    readonly id: string
}

/**
 * Request parameters for getCourse operation in CourseServiceApi.
 * @export
 * @interface CourseServiceApiGetCourseRequest
 */
export interface CourseServiceApiGetCourseRequest {
    /**
     * 
     * @type {string}
     * @memberof CourseServiceApiGetCourse
     */
    readonly id: string
}

/**
 * Request parameters for listCourse operation in CourseServiceApi.
 * @export
 * @interface CourseServiceApiListCourseRequest
 */
export interface CourseServiceApiListCourseRequest {
    /**
     * 
     * @type {number}
     * @memberof CourseServiceApiListCourse
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof CourseServiceApiListCourse
     */
    readonly per_page?: number
}

/**
 * Request parameters for removeCourseTag operation in CourseServiceApi.
 * @export
 * @interface CourseServiceApiRemoveCourseTagRequest
 */
export interface CourseServiceApiRemoveCourseTagRequest {
    /**
     * 
     * @type {string}
     * @memberof CourseServiceApiRemoveCourseTag
     */
    readonly course_id: string

    /**
     * 
     * @type {string}
     * @memberof CourseServiceApiRemoveCourseTag
     */
    readonly tag_id: string
}

/**
 * Request parameters for updateCourse operation in CourseServiceApi.
 * @export
 * @interface CourseServiceApiUpdateCourseRequest
 */
export interface CourseServiceApiUpdateCourseRequest {
    /**
     * 
     * @type {string}
     * @memberof CourseServiceApiUpdateCourse
     */
    readonly id: string

    /**
     * 
     * @type {object}
     * @memberof CourseServiceApiUpdateCourse
     */
    readonly body: object
}

/**
 * CourseServiceApi - object-oriented interface
 * @export
 * @class CourseServiceApi
 * @extends {BaseAPI}
 */
export class CourseServiceApi extends BaseAPI {
    /**
     * 
     * @param {CourseServiceApiAddCourseTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseServiceApi
     */
    public addCourseTag(requestParameters: CourseServiceApiAddCourseTagRequest, options?: RawAxiosRequestConfig) {
        return CourseServiceApiFp(this.configuration).addCourseTag(requestParameters.course_id, requestParameters.tag_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CourseServiceApiCreateCourseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseServiceApi
     */
    public createCourse(requestParameters: CourseServiceApiCreateCourseRequest, options?: RawAxiosRequestConfig) {
        return CourseServiceApiFp(this.configuration).createCourse(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CourseServiceApiDeleteCourseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseServiceApi
     */
    public deleteCourse(requestParameters: CourseServiceApiDeleteCourseRequest, options?: RawAxiosRequestConfig) {
        return CourseServiceApiFp(this.configuration).deleteCourse(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CourseServiceApiGetCourseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseServiceApi
     */
    public getCourse(requestParameters: CourseServiceApiGetCourseRequest, options?: RawAxiosRequestConfig) {
        return CourseServiceApiFp(this.configuration).getCourse(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CourseServiceApiListCourseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseServiceApi
     */
    public listCourse(requestParameters: CourseServiceApiListCourseRequest = {}, options?: RawAxiosRequestConfig) {
        return CourseServiceApiFp(this.configuration).listCourse(requestParameters.page, requestParameters.per_page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CourseServiceApiRemoveCourseTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseServiceApi
     */
    public removeCourseTag(requestParameters: CourseServiceApiRemoveCourseTagRequest, options?: RawAxiosRequestConfig) {
        return CourseServiceApiFp(this.configuration).removeCourseTag(requestParameters.course_id, requestParameters.tag_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CourseServiceApiUpdateCourseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseServiceApi
     */
    public updateCourse(requestParameters: CourseServiceApiUpdateCourseRequest, options?: RawAxiosRequestConfig) {
        return CourseServiceApiFp(this.configuration).updateCourse(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FileServiceApi - axios parameter creator
 * @export
 */
export const FileServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFileURL: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('downloadFileURL', 'id', id)
            const localVarPath = `/v1/files/{id}/url`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFileURL: async (id: string, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateFileURL', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateFileURL', 'body', body)
            const localVarPath = `/v1/files/{id}/url`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FileServiceApi - functional programming interface
 * @export
 */
export const FileServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FileServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadFileURL(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1DownloadFileURLResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadFileURL(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FileServiceApi.downloadFileURL']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateFileURL(id: string, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1UpdateFileURLResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateFileURL(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FileServiceApi.updateFileURL']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FileServiceApi - factory interface
 * @export
 */
export const FileServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FileServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {FileServiceApiDownloadFileURLRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFileURL(requestParameters: FileServiceApiDownloadFileURLRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1DownloadFileURLResponse> {
            return localVarFp.downloadFileURL(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FileServiceApiUpdateFileURLRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFileURL(requestParameters: FileServiceApiUpdateFileURLRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1UpdateFileURLResponse> {
            return localVarFp.updateFileURL(requestParameters.id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for downloadFileURL operation in FileServiceApi.
 * @export
 * @interface FileServiceApiDownloadFileURLRequest
 */
export interface FileServiceApiDownloadFileURLRequest {
    /**
     * 
     * @type {string}
     * @memberof FileServiceApiDownloadFileURL
     */
    readonly id: string
}

/**
 * Request parameters for updateFileURL operation in FileServiceApi.
 * @export
 * @interface FileServiceApiUpdateFileURLRequest
 */
export interface FileServiceApiUpdateFileURLRequest {
    /**
     * 
     * @type {string}
     * @memberof FileServiceApiUpdateFileURL
     */
    readonly id: string

    /**
     * 
     * @type {object}
     * @memberof FileServiceApiUpdateFileURL
     */
    readonly body: object
}

/**
 * FileServiceApi - object-oriented interface
 * @export
 * @class FileServiceApi
 * @extends {BaseAPI}
 */
export class FileServiceApi extends BaseAPI {
    /**
     * 
     * @param {FileServiceApiDownloadFileURLRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileServiceApi
     */
    public downloadFileURL(requestParameters: FileServiceApiDownloadFileURLRequest, options?: RawAxiosRequestConfig) {
        return FileServiceApiFp(this.configuration).downloadFileURL(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FileServiceApiUpdateFileURLRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileServiceApi
     */
    public updateFileURL(requestParameters: FileServiceApiUpdateFileURLRequest, options?: RawAxiosRequestConfig) {
        return FileServiceApiFp(this.configuration).updateFileURL(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * NewsLetterServiceApi - axios parameter creator
 * @export
 */
export const NewsLetterServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {V1SendNewsletterSubscriptionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendNewsLetter: async (body: V1SendNewsletterSubscriptionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('sendNewsLetter', 'body', body)
            const localVarPath = `/v1/newsletters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NewsLetterServiceApi - functional programming interface
 * @export
 */
export const NewsLetterServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NewsLetterServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {V1SendNewsletterSubscriptionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendNewsLetter(body: V1SendNewsletterSubscriptionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1SendNewsletterSubscriptionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendNewsLetter(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NewsLetterServiceApi.sendNewsLetter']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * NewsLetterServiceApi - factory interface
 * @export
 */
export const NewsLetterServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NewsLetterServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {NewsLetterServiceApiSendNewsLetterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendNewsLetter(requestParameters: NewsLetterServiceApiSendNewsLetterRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1SendNewsletterSubscriptionResponse> {
            return localVarFp.sendNewsLetter(requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for sendNewsLetter operation in NewsLetterServiceApi.
 * @export
 * @interface NewsLetterServiceApiSendNewsLetterRequest
 */
export interface NewsLetterServiceApiSendNewsLetterRequest {
    /**
     * 
     * @type {V1SendNewsletterSubscriptionRequest}
     * @memberof NewsLetterServiceApiSendNewsLetter
     */
    readonly body: V1SendNewsletterSubscriptionRequest
}

/**
 * NewsLetterServiceApi - object-oriented interface
 * @export
 * @class NewsLetterServiceApi
 * @extends {BaseAPI}
 */
export class NewsLetterServiceApi extends BaseAPI {
    /**
     * 
     * @param {NewsLetterServiceApiSendNewsLetterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsLetterServiceApi
     */
    public sendNewsLetter(requestParameters: NewsLetterServiceApiSendNewsLetterRequest, options?: RawAxiosRequestConfig) {
        return NewsLetterServiceApiFp(this.configuration).sendNewsLetter(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PageServiceApi - axios parameter creator
 * @export
 */
export const PageServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} page_id 
         * @param {string} tag_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPageTag: async (page_id: string, tag_id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page_id' is not null or undefined
            assertParamExists('addPageTag', 'page_id', page_id)
            // verify required parameter 'tag_id' is not null or undefined
            assertParamExists('addPageTag', 'tag_id', tag_id)
            const localVarPath = `/v1/pages/{pageId}/tags/{tagId}`
                .replace(`{${"pageId"}}`, encodeURIComponent(String(page_id)))
                .replace(`{${"tagId"}}`, encodeURIComponent(String(tag_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {V1CreatePageRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPage: async (body: V1CreatePageRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createPage', 'body', body)
            const localVarPath = `/v1/pages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePage: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePage', 'id', id)
            const localVarPath = `/v1/pages/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPage: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPage', 'id', id)
            const localVarPath = `/v1/pages/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} page_id 
         * @param {string} tag_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePageTag: async (page_id: string, tag_id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page_id' is not null or undefined
            assertParamExists('removePageTag', 'page_id', page_id)
            // verify required parameter 'tag_id' is not null or undefined
            assertParamExists('removePageTag', 'tag_id', tag_id)
            const localVarPath = `/v1/pages/{pageId}/tags/{tagId}`
                .replace(`{${"pageId"}}`, encodeURIComponent(String(page_id)))
                .replace(`{${"tagId"}}`, encodeURIComponent(String(tag_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {PageServiceUpdatePageRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePage: async (id: string, body: PageServiceUpdatePageRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updatePage', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updatePage', 'body', body)
            const localVarPath = `/v1/pages/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PageServiceApi - functional programming interface
 * @export
 */
export const PageServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PageServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} page_id 
         * @param {string} tag_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPageTag(page_id: string, tag_id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AddPageTagResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPageTag(page_id, tag_id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PageServiceApi.addPageTag']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {V1CreatePageRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPage(body: V1CreatePageRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1CreatePageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPage(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PageServiceApi.createPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePage(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1DeletePageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePage(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PageServiceApi.deletePage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPage(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1GetPageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPage(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PageServiceApi.getPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} page_id 
         * @param {string} tag_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removePageTag(page_id: string, tag_id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1RemovePageTagResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removePageTag(page_id, tag_id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PageServiceApi.removePageTag']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {PageServiceUpdatePageRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePage(id: string, body: PageServiceUpdatePageRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1UpdatePageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePage(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PageServiceApi.updatePage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PageServiceApi - factory interface
 * @export
 */
export const PageServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PageServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {PageServiceApiAddPageTagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPageTag(requestParameters: PageServiceApiAddPageTagRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1AddPageTagResponse> {
            return localVarFp.addPageTag(requestParameters.page_id, requestParameters.tag_id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PageServiceApiCreatePageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPage(requestParameters: PageServiceApiCreatePageRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1CreatePageResponse> {
            return localVarFp.createPage(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PageServiceApiDeletePageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePage(requestParameters: PageServiceApiDeletePageRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1DeletePageResponse> {
            return localVarFp.deletePage(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PageServiceApiGetPageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPage(requestParameters: PageServiceApiGetPageRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1GetPageResponse> {
            return localVarFp.getPage(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PageServiceApiRemovePageTagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePageTag(requestParameters: PageServiceApiRemovePageTagRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1RemovePageTagResponse> {
            return localVarFp.removePageTag(requestParameters.page_id, requestParameters.tag_id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PageServiceApiUpdatePageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePage(requestParameters: PageServiceApiUpdatePageRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1UpdatePageResponse> {
            return localVarFp.updatePage(requestParameters.id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addPageTag operation in PageServiceApi.
 * @export
 * @interface PageServiceApiAddPageTagRequest
 */
export interface PageServiceApiAddPageTagRequest {
    /**
     * 
     * @type {string}
     * @memberof PageServiceApiAddPageTag
     */
    readonly page_id: string

    /**
     * 
     * @type {string}
     * @memberof PageServiceApiAddPageTag
     */
    readonly tag_id: string
}

/**
 * Request parameters for createPage operation in PageServiceApi.
 * @export
 * @interface PageServiceApiCreatePageRequest
 */
export interface PageServiceApiCreatePageRequest {
    /**
     * 
     * @type {V1CreatePageRequest}
     * @memberof PageServiceApiCreatePage
     */
    readonly body: V1CreatePageRequest
}

/**
 * Request parameters for deletePage operation in PageServiceApi.
 * @export
 * @interface PageServiceApiDeletePageRequest
 */
export interface PageServiceApiDeletePageRequest {
    /**
     * 
     * @type {string}
     * @memberof PageServiceApiDeletePage
     */
    readonly id: string
}

/**
 * Request parameters for getPage operation in PageServiceApi.
 * @export
 * @interface PageServiceApiGetPageRequest
 */
export interface PageServiceApiGetPageRequest {
    /**
     * 
     * @type {string}
     * @memberof PageServiceApiGetPage
     */
    readonly id: string
}

/**
 * Request parameters for removePageTag operation in PageServiceApi.
 * @export
 * @interface PageServiceApiRemovePageTagRequest
 */
export interface PageServiceApiRemovePageTagRequest {
    /**
     * 
     * @type {string}
     * @memberof PageServiceApiRemovePageTag
     */
    readonly page_id: string

    /**
     * 
     * @type {string}
     * @memberof PageServiceApiRemovePageTag
     */
    readonly tag_id: string
}

/**
 * Request parameters for updatePage operation in PageServiceApi.
 * @export
 * @interface PageServiceApiUpdatePageRequest
 */
export interface PageServiceApiUpdatePageRequest {
    /**
     * 
     * @type {string}
     * @memberof PageServiceApiUpdatePage
     */
    readonly id: string

    /**
     * 
     * @type {PageServiceUpdatePageRequest}
     * @memberof PageServiceApiUpdatePage
     */
    readonly body: PageServiceUpdatePageRequest
}

/**
 * PageServiceApi - object-oriented interface
 * @export
 * @class PageServiceApi
 * @extends {BaseAPI}
 */
export class PageServiceApi extends BaseAPI {
    /**
     * 
     * @param {PageServiceApiAddPageTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageServiceApi
     */
    public addPageTag(requestParameters: PageServiceApiAddPageTagRequest, options?: RawAxiosRequestConfig) {
        return PageServiceApiFp(this.configuration).addPageTag(requestParameters.page_id, requestParameters.tag_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PageServiceApiCreatePageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageServiceApi
     */
    public createPage(requestParameters: PageServiceApiCreatePageRequest, options?: RawAxiosRequestConfig) {
        return PageServiceApiFp(this.configuration).createPage(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PageServiceApiDeletePageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageServiceApi
     */
    public deletePage(requestParameters: PageServiceApiDeletePageRequest, options?: RawAxiosRequestConfig) {
        return PageServiceApiFp(this.configuration).deletePage(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PageServiceApiGetPageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageServiceApi
     */
    public getPage(requestParameters: PageServiceApiGetPageRequest, options?: RawAxiosRequestConfig) {
        return PageServiceApiFp(this.configuration).getPage(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PageServiceApiRemovePageTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageServiceApi
     */
    public removePageTag(requestParameters: PageServiceApiRemovePageTagRequest, options?: RawAxiosRequestConfig) {
        return PageServiceApiFp(this.configuration).removePageTag(requestParameters.page_id, requestParameters.tag_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PageServiceApiUpdatePageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageServiceApi
     */
    public updatePage(requestParameters: PageServiceApiUpdatePageRequest, options?: RawAxiosRequestConfig) {
        return PageServiceApiFp(this.configuration).updatePage(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PostServiceApi - axios parameter creator
 * @export
 */
export const PostServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary AddPostTag
         * @param {string} post_id 
         * @param {string} tag_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPostTag: async (post_id: string, tag_id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'post_id' is not null or undefined
            assertParamExists('addPostTag', 'post_id', post_id)
            // verify required parameter 'tag_id' is not null or undefined
            assertParamExists('addPostTag', 'tag_id', tag_id)
            const localVarPath = `/v1/posts/{postId}/tags/{tagId}`
                .replace(`{${"postId"}}`, encodeURIComponent(String(post_id)))
                .replace(`{${"tagId"}}`, encodeURIComponent(String(tag_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary CreatePost
         * @param {V1CreatePostRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPost: async (body: V1CreatePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createPost', 'body', body)
            const localVarPath = `/v1/posts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary DeletePost
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePost: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePost', 'id', id)
            const localVarPath = `/v1/posts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetPost
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPost: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPost', 'id', id)
            const localVarPath = `/v1/posts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetPostBySlag
         * @param {string} slag 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostBySlag: async (slag: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slag' is not null or undefined
            assertParamExists('getPostBySlag', 'slag', slag)
            const localVarPath = `/v1/posts/slag/{slag}`
                .replace(`{${"slag"}}`, encodeURIComponent(String(slag)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ListPost
         * @param {ListPostStatusEnum} [status] 
         * @param {number} [page] 
         * @param {number} [per_page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPost: async (status?: ListPostStatusEnum, page?: number, per_page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/posts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (per_page !== undefined) {
                localVarQueryParameter['perPage'] = per_page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary RemovePostTag
         * @param {string} post_id 
         * @param {string} tag_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePostTag: async (post_id: string, tag_id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'post_id' is not null or undefined
            assertParamExists('removePostTag', 'post_id', post_id)
            // verify required parameter 'tag_id' is not null or undefined
            assertParamExists('removePostTag', 'tag_id', tag_id)
            const localVarPath = `/v1/posts/{postId}/tags/{tagId}`
                .replace(`{${"postId"}}`, encodeURIComponent(String(post_id)))
                .replace(`{${"tagId"}}`, encodeURIComponent(String(tag_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary UpdatePost
         * @param {string} post_id 
         * @param {PostServiceUpdatePostRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePost: async (post_id: string, body: PostServiceUpdatePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'post_id' is not null or undefined
            assertParamExists('updatePost', 'post_id', post_id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updatePost', 'body', body)
            const localVarPath = `/v1/posts/{postId}`
                .replace(`{${"postId"}}`, encodeURIComponent(String(post_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary UpdatePostReaction
         * @param {string} post_id 
         * @param {PostServiceUpdatePostReactionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePostReaction: async (post_id: string, body: PostServiceUpdatePostReactionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'post_id' is not null or undefined
            assertParamExists('updatePostReaction', 'post_id', post_id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updatePostReaction', 'body', body)
            const localVarPath = `/v1/posts/{postId}/reaction`
                .replace(`{${"postId"}}`, encodeURIComponent(String(post_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary UpdatePostStatus
         * @param {string} post_id 
         * @param {PostServiceUpdatePostStatusRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePostStatus: async (post_id: string, body: PostServiceUpdatePostStatusRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'post_id' is not null or undefined
            assertParamExists('updatePostStatus', 'post_id', post_id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updatePostStatus', 'body', body)
            const localVarPath = `/v1/posts/{postId}/status`
                .replace(`{${"postId"}}`, encodeURIComponent(String(post_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PostServiceApi - functional programming interface
 * @export
 */
export const PostServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PostServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary AddPostTag
         * @param {string} post_id 
         * @param {string} tag_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPostTag(post_id: string, tag_id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AddPostTagResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPostTag(post_id, tag_id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PostServiceApi.addPostTag']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary CreatePost
         * @param {V1CreatePostRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPost(body: V1CreatePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1CreatePostResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPost(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PostServiceApi.createPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary DeletePost
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePost(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1DeletePostResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePost(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PostServiceApi.deletePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary GetPost
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPost(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1GetPostResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPost(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PostServiceApi.getPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary GetPostBySlag
         * @param {string} slag 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPostBySlag(slag: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1GetPostBySlagResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPostBySlag(slag, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PostServiceApi.getPostBySlag']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ListPost
         * @param {ListPostStatusEnum} [status] 
         * @param {number} [page] 
         * @param {number} [per_page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPost(status?: ListPostStatusEnum, page?: number, per_page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ListPostResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPost(status, page, per_page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PostServiceApi.listPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary RemovePostTag
         * @param {string} post_id 
         * @param {string} tag_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removePostTag(post_id: string, tag_id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1RemovePostTagResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removePostTag(post_id, tag_id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PostServiceApi.removePostTag']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary UpdatePost
         * @param {string} post_id 
         * @param {PostServiceUpdatePostRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePost(post_id: string, body: PostServiceUpdatePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1UpdatePostResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePost(post_id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PostServiceApi.updatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary UpdatePostReaction
         * @param {string} post_id 
         * @param {PostServiceUpdatePostReactionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePostReaction(post_id: string, body: PostServiceUpdatePostReactionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1UpdatePostReactionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePostReaction(post_id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PostServiceApi.updatePostReaction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary UpdatePostStatus
         * @param {string} post_id 
         * @param {PostServiceUpdatePostStatusRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePostStatus(post_id: string, body: PostServiceUpdatePostStatusRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1UpdatePostStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePostStatus(post_id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PostServiceApi.updatePostStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PostServiceApi - factory interface
 * @export
 */
export const PostServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PostServiceApiFp(configuration)
    return {
        /**
         * 
         * @summary AddPostTag
         * @param {PostServiceApiAddPostTagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPostTag(requestParameters: PostServiceApiAddPostTagRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1AddPostTagResponse> {
            return localVarFp.addPostTag(requestParameters.post_id, requestParameters.tag_id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary CreatePost
         * @param {PostServiceApiCreatePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPost(requestParameters: PostServiceApiCreatePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1CreatePostResponse> {
            return localVarFp.createPost(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary DeletePost
         * @param {PostServiceApiDeletePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePost(requestParameters: PostServiceApiDeletePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1DeletePostResponse> {
            return localVarFp.deletePost(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetPost
         * @param {PostServiceApiGetPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPost(requestParameters: PostServiceApiGetPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1GetPostResponse> {
            return localVarFp.getPost(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetPostBySlag
         * @param {PostServiceApiGetPostBySlagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostBySlag(requestParameters: PostServiceApiGetPostBySlagRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1GetPostBySlagResponse> {
            return localVarFp.getPostBySlag(requestParameters.slag, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ListPost
         * @param {PostServiceApiListPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPost(requestParameters: PostServiceApiListPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<V1ListPostResponse> {
            return localVarFp.listPost(requestParameters.status, requestParameters.page, requestParameters.per_page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary RemovePostTag
         * @param {PostServiceApiRemovePostTagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePostTag(requestParameters: PostServiceApiRemovePostTagRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1RemovePostTagResponse> {
            return localVarFp.removePostTag(requestParameters.post_id, requestParameters.tag_id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary UpdatePost
         * @param {PostServiceApiUpdatePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePost(requestParameters: PostServiceApiUpdatePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1UpdatePostResponse> {
            return localVarFp.updatePost(requestParameters.post_id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary UpdatePostReaction
         * @param {PostServiceApiUpdatePostReactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePostReaction(requestParameters: PostServiceApiUpdatePostReactionRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1UpdatePostReactionResponse> {
            return localVarFp.updatePostReaction(requestParameters.post_id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary UpdatePostStatus
         * @param {PostServiceApiUpdatePostStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePostStatus(requestParameters: PostServiceApiUpdatePostStatusRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1UpdatePostStatusResponse> {
            return localVarFp.updatePostStatus(requestParameters.post_id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addPostTag operation in PostServiceApi.
 * @export
 * @interface PostServiceApiAddPostTagRequest
 */
export interface PostServiceApiAddPostTagRequest {
    /**
     * 
     * @type {string}
     * @memberof PostServiceApiAddPostTag
     */
    readonly post_id: string

    /**
     * 
     * @type {string}
     * @memberof PostServiceApiAddPostTag
     */
    readonly tag_id: string
}

/**
 * Request parameters for createPost operation in PostServiceApi.
 * @export
 * @interface PostServiceApiCreatePostRequest
 */
export interface PostServiceApiCreatePostRequest {
    /**
     * 
     * @type {V1CreatePostRequest}
     * @memberof PostServiceApiCreatePost
     */
    readonly body: V1CreatePostRequest
}

/**
 * Request parameters for deletePost operation in PostServiceApi.
 * @export
 * @interface PostServiceApiDeletePostRequest
 */
export interface PostServiceApiDeletePostRequest {
    /**
     * 
     * @type {string}
     * @memberof PostServiceApiDeletePost
     */
    readonly id: string
}

/**
 * Request parameters for getPost operation in PostServiceApi.
 * @export
 * @interface PostServiceApiGetPostRequest
 */
export interface PostServiceApiGetPostRequest {
    /**
     * 
     * @type {string}
     * @memberof PostServiceApiGetPost
     */
    readonly id: string
}

/**
 * Request parameters for getPostBySlag operation in PostServiceApi.
 * @export
 * @interface PostServiceApiGetPostBySlagRequest
 */
export interface PostServiceApiGetPostBySlagRequest {
    /**
     * 
     * @type {string}
     * @memberof PostServiceApiGetPostBySlag
     */
    readonly slag: string
}

/**
 * Request parameters for listPost operation in PostServiceApi.
 * @export
 * @interface PostServiceApiListPostRequest
 */
export interface PostServiceApiListPostRequest {
    /**
     * 
     * @type {'DRAFT' | 'PUBLISHED' | 'UNPUBLISHED' | 'ARCHIVED'}
     * @memberof PostServiceApiListPost
     */
    readonly status?: ListPostStatusEnum

    /**
     * 
     * @type {number}
     * @memberof PostServiceApiListPost
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof PostServiceApiListPost
     */
    readonly per_page?: number
}

/**
 * Request parameters for removePostTag operation in PostServiceApi.
 * @export
 * @interface PostServiceApiRemovePostTagRequest
 */
export interface PostServiceApiRemovePostTagRequest {
    /**
     * 
     * @type {string}
     * @memberof PostServiceApiRemovePostTag
     */
    readonly post_id: string

    /**
     * 
     * @type {string}
     * @memberof PostServiceApiRemovePostTag
     */
    readonly tag_id: string
}

/**
 * Request parameters for updatePost operation in PostServiceApi.
 * @export
 * @interface PostServiceApiUpdatePostRequest
 */
export interface PostServiceApiUpdatePostRequest {
    /**
     * 
     * @type {string}
     * @memberof PostServiceApiUpdatePost
     */
    readonly post_id: string

    /**
     * 
     * @type {PostServiceUpdatePostRequest}
     * @memberof PostServiceApiUpdatePost
     */
    readonly body: PostServiceUpdatePostRequest
}

/**
 * Request parameters for updatePostReaction operation in PostServiceApi.
 * @export
 * @interface PostServiceApiUpdatePostReactionRequest
 */
export interface PostServiceApiUpdatePostReactionRequest {
    /**
     * 
     * @type {string}
     * @memberof PostServiceApiUpdatePostReaction
     */
    readonly post_id: string

    /**
     * 
     * @type {PostServiceUpdatePostReactionRequest}
     * @memberof PostServiceApiUpdatePostReaction
     */
    readonly body: PostServiceUpdatePostReactionRequest
}

/**
 * Request parameters for updatePostStatus operation in PostServiceApi.
 * @export
 * @interface PostServiceApiUpdatePostStatusRequest
 */
export interface PostServiceApiUpdatePostStatusRequest {
    /**
     * 
     * @type {string}
     * @memberof PostServiceApiUpdatePostStatus
     */
    readonly post_id: string

    /**
     * 
     * @type {PostServiceUpdatePostStatusRequest}
     * @memberof PostServiceApiUpdatePostStatus
     */
    readonly body: PostServiceUpdatePostStatusRequest
}

/**
 * PostServiceApi - object-oriented interface
 * @export
 * @class PostServiceApi
 * @extends {BaseAPI}
 */
export class PostServiceApi extends BaseAPI {
    /**
     * 
     * @summary AddPostTag
     * @param {PostServiceApiAddPostTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostServiceApi
     */
    public addPostTag(requestParameters: PostServiceApiAddPostTagRequest, options?: RawAxiosRequestConfig) {
        return PostServiceApiFp(this.configuration).addPostTag(requestParameters.post_id, requestParameters.tag_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary CreatePost
     * @param {PostServiceApiCreatePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostServiceApi
     */
    public createPost(requestParameters: PostServiceApiCreatePostRequest, options?: RawAxiosRequestConfig) {
        return PostServiceApiFp(this.configuration).createPost(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary DeletePost
     * @param {PostServiceApiDeletePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostServiceApi
     */
    public deletePost(requestParameters: PostServiceApiDeletePostRequest, options?: RawAxiosRequestConfig) {
        return PostServiceApiFp(this.configuration).deletePost(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetPost
     * @param {PostServiceApiGetPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostServiceApi
     */
    public getPost(requestParameters: PostServiceApiGetPostRequest, options?: RawAxiosRequestConfig) {
        return PostServiceApiFp(this.configuration).getPost(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetPostBySlag
     * @param {PostServiceApiGetPostBySlagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostServiceApi
     */
    public getPostBySlag(requestParameters: PostServiceApiGetPostBySlagRequest, options?: RawAxiosRequestConfig) {
        return PostServiceApiFp(this.configuration).getPostBySlag(requestParameters.slag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ListPost
     * @param {PostServiceApiListPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostServiceApi
     */
    public listPost(requestParameters: PostServiceApiListPostRequest = {}, options?: RawAxiosRequestConfig) {
        return PostServiceApiFp(this.configuration).listPost(requestParameters.status, requestParameters.page, requestParameters.per_page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary RemovePostTag
     * @param {PostServiceApiRemovePostTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostServiceApi
     */
    public removePostTag(requestParameters: PostServiceApiRemovePostTagRequest, options?: RawAxiosRequestConfig) {
        return PostServiceApiFp(this.configuration).removePostTag(requestParameters.post_id, requestParameters.tag_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary UpdatePost
     * @param {PostServiceApiUpdatePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostServiceApi
     */
    public updatePost(requestParameters: PostServiceApiUpdatePostRequest, options?: RawAxiosRequestConfig) {
        return PostServiceApiFp(this.configuration).updatePost(requestParameters.post_id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary UpdatePostReaction
     * @param {PostServiceApiUpdatePostReactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostServiceApi
     */
    public updatePostReaction(requestParameters: PostServiceApiUpdatePostReactionRequest, options?: RawAxiosRequestConfig) {
        return PostServiceApiFp(this.configuration).updatePostReaction(requestParameters.post_id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary UpdatePostStatus
     * @param {PostServiceApiUpdatePostStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostServiceApi
     */
    public updatePostStatus(requestParameters: PostServiceApiUpdatePostStatusRequest, options?: RawAxiosRequestConfig) {
        return PostServiceApiFp(this.configuration).updatePostStatus(requestParameters.post_id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ListPostStatusEnum = {
    draft: 'DRAFT',
    published: 'PUBLISHED',
    unpublished: 'UNPUBLISHED',
    archived: 'ARCHIVED'
} as const;
export type ListPostStatusEnum = typeof ListPostStatusEnum[keyof typeof ListPostStatusEnum];


/**
 * TagServiceApi - axios parameter creator
 * @export
 */
export const TagServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {V1CreateTagRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTag: async (body: V1CreateTagRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createTag', 'body', body)
            const localVarPath = `/v1/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTag: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTag', 'id', id)
            const localVarPath = `/v1/tags/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTag: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTag', 'id', id)
            const localVarPath = `/v1/tags/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [space_id] 
         * @param {number} [page] 
         * @param {number} [per_page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTag: async (space_id?: string, page?: number, per_page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (space_id !== undefined) {
                localVarQueryParameter['spaceId'] = space_id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (per_page !== undefined) {
                localVarQueryParameter['perPage'] = per_page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {TagServiceUpdateTagRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTag: async (id: string, body: TagServiceUpdateTagRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateTag', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateTag', 'body', body)
            const localVarPath = `/v1/tags/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TagServiceApi - functional programming interface
 * @export
 */
export const TagServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TagServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {V1CreateTagRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTag(body: V1CreateTagRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1CreateTagResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTag(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TagServiceApi.createTag']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTag(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1DeleteTagResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTag(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TagServiceApi.deleteTag']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTag(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1GetTagResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTag(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TagServiceApi.getTag']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [space_id] 
         * @param {number} [page] 
         * @param {number} [per_page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTag(space_id?: string, page?: number, per_page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ListTagResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTag(space_id, page, per_page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TagServiceApi.listTag']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {TagServiceUpdateTagRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTag(id: string, body: TagServiceUpdateTagRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1UpdateTagResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTag(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TagServiceApi.updateTag']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TagServiceApi - factory interface
 * @export
 */
export const TagServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TagServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {TagServiceApiCreateTagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTag(requestParameters: TagServiceApiCreateTagRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1CreateTagResponse> {
            return localVarFp.createTag(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TagServiceApiDeleteTagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTag(requestParameters: TagServiceApiDeleteTagRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1DeleteTagResponse> {
            return localVarFp.deleteTag(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TagServiceApiGetTagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTag(requestParameters: TagServiceApiGetTagRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1GetTagResponse> {
            return localVarFp.getTag(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TagServiceApiListTagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTag(requestParameters: TagServiceApiListTagRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<V1ListTagResponse> {
            return localVarFp.listTag(requestParameters.space_id, requestParameters.page, requestParameters.per_page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TagServiceApiUpdateTagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTag(requestParameters: TagServiceApiUpdateTagRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1UpdateTagResponse> {
            return localVarFp.updateTag(requestParameters.id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createTag operation in TagServiceApi.
 * @export
 * @interface TagServiceApiCreateTagRequest
 */
export interface TagServiceApiCreateTagRequest {
    /**
     * 
     * @type {V1CreateTagRequest}
     * @memberof TagServiceApiCreateTag
     */
    readonly body: V1CreateTagRequest
}

/**
 * Request parameters for deleteTag operation in TagServiceApi.
 * @export
 * @interface TagServiceApiDeleteTagRequest
 */
export interface TagServiceApiDeleteTagRequest {
    /**
     * 
     * @type {string}
     * @memberof TagServiceApiDeleteTag
     */
    readonly id: string
}

/**
 * Request parameters for getTag operation in TagServiceApi.
 * @export
 * @interface TagServiceApiGetTagRequest
 */
export interface TagServiceApiGetTagRequest {
    /**
     * 
     * @type {string}
     * @memberof TagServiceApiGetTag
     */
    readonly id: string
}

/**
 * Request parameters for listTag operation in TagServiceApi.
 * @export
 * @interface TagServiceApiListTagRequest
 */
export interface TagServiceApiListTagRequest {
    /**
     * 
     * @type {string}
     * @memberof TagServiceApiListTag
     */
    readonly space_id?: string

    /**
     * 
     * @type {number}
     * @memberof TagServiceApiListTag
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof TagServiceApiListTag
     */
    readonly per_page?: number
}

/**
 * Request parameters for updateTag operation in TagServiceApi.
 * @export
 * @interface TagServiceApiUpdateTagRequest
 */
export interface TagServiceApiUpdateTagRequest {
    /**
     * 
     * @type {string}
     * @memberof TagServiceApiUpdateTag
     */
    readonly id: string

    /**
     * 
     * @type {TagServiceUpdateTagRequest}
     * @memberof TagServiceApiUpdateTag
     */
    readonly body: TagServiceUpdateTagRequest
}

/**
 * TagServiceApi - object-oriented interface
 * @export
 * @class TagServiceApi
 * @extends {BaseAPI}
 */
export class TagServiceApi extends BaseAPI {
    /**
     * 
     * @param {TagServiceApiCreateTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagServiceApi
     */
    public createTag(requestParameters: TagServiceApiCreateTagRequest, options?: RawAxiosRequestConfig) {
        return TagServiceApiFp(this.configuration).createTag(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TagServiceApiDeleteTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagServiceApi
     */
    public deleteTag(requestParameters: TagServiceApiDeleteTagRequest, options?: RawAxiosRequestConfig) {
        return TagServiceApiFp(this.configuration).deleteTag(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TagServiceApiGetTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagServiceApi
     */
    public getTag(requestParameters: TagServiceApiGetTagRequest, options?: RawAxiosRequestConfig) {
        return TagServiceApiFp(this.configuration).getTag(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TagServiceApiListTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagServiceApi
     */
    public listTag(requestParameters: TagServiceApiListTagRequest = {}, options?: RawAxiosRequestConfig) {
        return TagServiceApiFp(this.configuration).listTag(requestParameters.space_id, requestParameters.page, requestParameters.per_page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TagServiceApiUpdateTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagServiceApi
     */
    public updateTag(requestParameters: TagServiceApiUpdateTagRequest, options?: RawAxiosRequestConfig) {
        return TagServiceApiFp(this.configuration).updateTag(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TierMemberServiceApi - axios parameter creator
 * @export
 */
export const TierMemberServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {V1CreateTierMemberRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTierMember: async (body: V1CreateTierMemberRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createTierMember', 'body', body)
            const localVarPath = `/v1/tier_permissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTierMember: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTierMember', 'id', id)
            const localVarPath = `/v1/tier_permissions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTierMember: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTierMember', 'id', id)
            const localVarPath = `/v1/tier_permissions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [tier_id] 
         * @param {string} [space_id] 
         * @param {number} [page] 
         * @param {number} [per_page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTierMember: async (tier_id?: string, space_id?: string, page?: number, per_page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/tier_permissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tier_id !== undefined) {
                localVarQueryParameter['tierId'] = tier_id;
            }

            if (space_id !== undefined) {
                localVarQueryParameter['spaceId'] = space_id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (per_page !== undefined) {
                localVarQueryParameter['perPage'] = per_page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {TierMemberServiceUpdateTierMemberRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTierMember: async (id: string, body: TierMemberServiceUpdateTierMemberRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateTierMember', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateTierMember', 'body', body)
            const localVarPath = `/v1/tier_permissions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TierMemberServiceApi - functional programming interface
 * @export
 */
export const TierMemberServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TierMemberServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {V1CreateTierMemberRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTierMember(body: V1CreateTierMemberRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1CreateTierMemberResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTierMember(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TierMemberServiceApi.createTierMember']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTierMember(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1DeleteTierMemberResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTierMember(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TierMemberServiceApi.deleteTierMember']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTierMember(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1GetTierMemberResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTierMember(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TierMemberServiceApi.getTierMember']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [tier_id] 
         * @param {string} [space_id] 
         * @param {number} [page] 
         * @param {number} [per_page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTierMember(tier_id?: string, space_id?: string, page?: number, per_page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ListTierMemberResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTierMember(tier_id, space_id, page, per_page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TierMemberServiceApi.listTierMember']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {TierMemberServiceUpdateTierMemberRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTierMember(id: string, body: TierMemberServiceUpdateTierMemberRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1UpdateTierMemberResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTierMember(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TierMemberServiceApi.updateTierMember']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TierMemberServiceApi - factory interface
 * @export
 */
export const TierMemberServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TierMemberServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {TierMemberServiceApiCreateTierMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTierMember(requestParameters: TierMemberServiceApiCreateTierMemberRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1CreateTierMemberResponse> {
            return localVarFp.createTierMember(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TierMemberServiceApiDeleteTierMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTierMember(requestParameters: TierMemberServiceApiDeleteTierMemberRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1DeleteTierMemberResponse> {
            return localVarFp.deleteTierMember(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TierMemberServiceApiGetTierMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTierMember(requestParameters: TierMemberServiceApiGetTierMemberRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1GetTierMemberResponse> {
            return localVarFp.getTierMember(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TierMemberServiceApiListTierMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTierMember(requestParameters: TierMemberServiceApiListTierMemberRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<V1ListTierMemberResponse> {
            return localVarFp.listTierMember(requestParameters.tier_id, requestParameters.space_id, requestParameters.page, requestParameters.per_page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TierMemberServiceApiUpdateTierMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTierMember(requestParameters: TierMemberServiceApiUpdateTierMemberRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1UpdateTierMemberResponse> {
            return localVarFp.updateTierMember(requestParameters.id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createTierMember operation in TierMemberServiceApi.
 * @export
 * @interface TierMemberServiceApiCreateTierMemberRequest
 */
export interface TierMemberServiceApiCreateTierMemberRequest {
    /**
     * 
     * @type {V1CreateTierMemberRequest}
     * @memberof TierMemberServiceApiCreateTierMember
     */
    readonly body: V1CreateTierMemberRequest
}

/**
 * Request parameters for deleteTierMember operation in TierMemberServiceApi.
 * @export
 * @interface TierMemberServiceApiDeleteTierMemberRequest
 */
export interface TierMemberServiceApiDeleteTierMemberRequest {
    /**
     * 
     * @type {string}
     * @memberof TierMemberServiceApiDeleteTierMember
     */
    readonly id: string
}

/**
 * Request parameters for getTierMember operation in TierMemberServiceApi.
 * @export
 * @interface TierMemberServiceApiGetTierMemberRequest
 */
export interface TierMemberServiceApiGetTierMemberRequest {
    /**
     * 
     * @type {string}
     * @memberof TierMemberServiceApiGetTierMember
     */
    readonly id: string
}

/**
 * Request parameters for listTierMember operation in TierMemberServiceApi.
 * @export
 * @interface TierMemberServiceApiListTierMemberRequest
 */
export interface TierMemberServiceApiListTierMemberRequest {
    /**
     * 
     * @type {string}
     * @memberof TierMemberServiceApiListTierMember
     */
    readonly tier_id?: string

    /**
     * 
     * @type {string}
     * @memberof TierMemberServiceApiListTierMember
     */
    readonly space_id?: string

    /**
     * 
     * @type {number}
     * @memberof TierMemberServiceApiListTierMember
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof TierMemberServiceApiListTierMember
     */
    readonly per_page?: number
}

/**
 * Request parameters for updateTierMember operation in TierMemberServiceApi.
 * @export
 * @interface TierMemberServiceApiUpdateTierMemberRequest
 */
export interface TierMemberServiceApiUpdateTierMemberRequest {
    /**
     * 
     * @type {string}
     * @memberof TierMemberServiceApiUpdateTierMember
     */
    readonly id: string

    /**
     * 
     * @type {TierMemberServiceUpdateTierMemberRequest}
     * @memberof TierMemberServiceApiUpdateTierMember
     */
    readonly body: TierMemberServiceUpdateTierMemberRequest
}

/**
 * TierMemberServiceApi - object-oriented interface
 * @export
 * @class TierMemberServiceApi
 * @extends {BaseAPI}
 */
export class TierMemberServiceApi extends BaseAPI {
    /**
     * 
     * @param {TierMemberServiceApiCreateTierMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TierMemberServiceApi
     */
    public createTierMember(requestParameters: TierMemberServiceApiCreateTierMemberRequest, options?: RawAxiosRequestConfig) {
        return TierMemberServiceApiFp(this.configuration).createTierMember(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TierMemberServiceApiDeleteTierMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TierMemberServiceApi
     */
    public deleteTierMember(requestParameters: TierMemberServiceApiDeleteTierMemberRequest, options?: RawAxiosRequestConfig) {
        return TierMemberServiceApiFp(this.configuration).deleteTierMember(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TierMemberServiceApiGetTierMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TierMemberServiceApi
     */
    public getTierMember(requestParameters: TierMemberServiceApiGetTierMemberRequest, options?: RawAxiosRequestConfig) {
        return TierMemberServiceApiFp(this.configuration).getTierMember(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TierMemberServiceApiListTierMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TierMemberServiceApi
     */
    public listTierMember(requestParameters: TierMemberServiceApiListTierMemberRequest = {}, options?: RawAxiosRequestConfig) {
        return TierMemberServiceApiFp(this.configuration).listTierMember(requestParameters.tier_id, requestParameters.space_id, requestParameters.page, requestParameters.per_page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TierMemberServiceApiUpdateTierMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TierMemberServiceApi
     */
    public updateTierMember(requestParameters: TierMemberServiceApiUpdateTierMemberRequest, options?: RawAxiosRequestConfig) {
        return TierMemberServiceApiFp(this.configuration).updateTierMember(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TierServiceApi - axios parameter creator
 * @export
 */
export const TierServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {V1CreateTierRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTier: async (body: V1CreateTierRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createTier', 'body', body)
            const localVarPath = `/v1/tiers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTier: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTier', 'id', id)
            const localVarPath = `/v1/tiers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTier: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTier', 'id', id)
            const localVarPath = `/v1/tiers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [per_page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTiers: async (page?: number, per_page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/tiers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (per_page !== undefined) {
                localVarQueryParameter['perPage'] = per_page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {TierServiceUpdateTierRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTier: async (id: string, body: TierServiceUpdateTierRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateTier', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateTier', 'body', body)
            const localVarPath = `/v1/tiers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TierServiceApi - functional programming interface
 * @export
 */
export const TierServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TierServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {V1CreateTierRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTier(body: V1CreateTierRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1CreateTierResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTier(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TierServiceApi.createTier']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTier(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1DeleteTierResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTier(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TierServiceApi.deleteTier']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTier(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1GetTierResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTier(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TierServiceApi.getTier']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [per_page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTiers(page?: number, per_page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ListTiersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTiers(page, per_page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TierServiceApi.listTiers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {TierServiceUpdateTierRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTier(id: string, body: TierServiceUpdateTierRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1UpdateTierResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTier(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TierServiceApi.updateTier']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TierServiceApi - factory interface
 * @export
 */
export const TierServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TierServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {TierServiceApiCreateTierRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTier(requestParameters: TierServiceApiCreateTierRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1CreateTierResponse> {
            return localVarFp.createTier(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TierServiceApiDeleteTierRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTier(requestParameters: TierServiceApiDeleteTierRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1DeleteTierResponse> {
            return localVarFp.deleteTier(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TierServiceApiGetTierRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTier(requestParameters: TierServiceApiGetTierRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1GetTierResponse> {
            return localVarFp.getTier(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TierServiceApiListTiersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTiers(requestParameters: TierServiceApiListTiersRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<V1ListTiersResponse> {
            return localVarFp.listTiers(requestParameters.page, requestParameters.per_page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TierServiceApiUpdateTierRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTier(requestParameters: TierServiceApiUpdateTierRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1UpdateTierResponse> {
            return localVarFp.updateTier(requestParameters.id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createTier operation in TierServiceApi.
 * @export
 * @interface TierServiceApiCreateTierRequest
 */
export interface TierServiceApiCreateTierRequest {
    /**
     * 
     * @type {V1CreateTierRequest}
     * @memberof TierServiceApiCreateTier
     */
    readonly body: V1CreateTierRequest
}

/**
 * Request parameters for deleteTier operation in TierServiceApi.
 * @export
 * @interface TierServiceApiDeleteTierRequest
 */
export interface TierServiceApiDeleteTierRequest {
    /**
     * 
     * @type {string}
     * @memberof TierServiceApiDeleteTier
     */
    readonly id: string
}

/**
 * Request parameters for getTier operation in TierServiceApi.
 * @export
 * @interface TierServiceApiGetTierRequest
 */
export interface TierServiceApiGetTierRequest {
    /**
     * 
     * @type {string}
     * @memberof TierServiceApiGetTier
     */
    readonly id: string
}

/**
 * Request parameters for listTiers operation in TierServiceApi.
 * @export
 * @interface TierServiceApiListTiersRequest
 */
export interface TierServiceApiListTiersRequest {
    /**
     * 
     * @type {number}
     * @memberof TierServiceApiListTiers
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof TierServiceApiListTiers
     */
    readonly per_page?: number
}

/**
 * Request parameters for updateTier operation in TierServiceApi.
 * @export
 * @interface TierServiceApiUpdateTierRequest
 */
export interface TierServiceApiUpdateTierRequest {
    /**
     * 
     * @type {string}
     * @memberof TierServiceApiUpdateTier
     */
    readonly id: string

    /**
     * 
     * @type {TierServiceUpdateTierRequest}
     * @memberof TierServiceApiUpdateTier
     */
    readonly body: TierServiceUpdateTierRequest
}

/**
 * TierServiceApi - object-oriented interface
 * @export
 * @class TierServiceApi
 * @extends {BaseAPI}
 */
export class TierServiceApi extends BaseAPI {
    /**
     * 
     * @param {TierServiceApiCreateTierRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TierServiceApi
     */
    public createTier(requestParameters: TierServiceApiCreateTierRequest, options?: RawAxiosRequestConfig) {
        return TierServiceApiFp(this.configuration).createTier(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TierServiceApiDeleteTierRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TierServiceApi
     */
    public deleteTier(requestParameters: TierServiceApiDeleteTierRequest, options?: RawAxiosRequestConfig) {
        return TierServiceApiFp(this.configuration).deleteTier(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TierServiceApiGetTierRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TierServiceApi
     */
    public getTier(requestParameters: TierServiceApiGetTierRequest, options?: RawAxiosRequestConfig) {
        return TierServiceApiFp(this.configuration).getTier(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TierServiceApiListTiersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TierServiceApi
     */
    public listTiers(requestParameters: TierServiceApiListTiersRequest = {}, options?: RawAxiosRequestConfig) {
        return TierServiceApiFp(this.configuration).listTiers(requestParameters.page, requestParameters.per_page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TierServiceApiUpdateTierRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TierServiceApi
     */
    public updateTier(requestParameters: TierServiceApiUpdateTierRequest, options?: RawAxiosRequestConfig) {
        return TierServiceApiFp(this.configuration).updateTier(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}



